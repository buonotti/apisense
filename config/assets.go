// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/.env.example
// assets/bluetooth.toml
// assets/bluetooth2.toml
// assets/config.example.toml
// assets/mocha.toml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsEnvExample = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0c\xf0\x0c\x76\xf5\x0b\x76\x8d\x77\xf5\x75\xf4\xf4\x89\x0f\x0d\x76\x0d\xb2\xcd\x4d\x75\x48\xad\x48\xcc\x2d\xc8\x49\xd5\x4b\xce\xcf\xe5\x42\x53\x12\xe0\x18\x1c\x6c\x5b\x5c\x5a\x90\x5a\xa4\x5b\x9c\x9a\x5c\x94\x5a\xa2\x57\x90\x58\x5c\x5c\x9e\x5f\x94\x02\x08\x00\x00\xff\xff\x47\xd5\xa7\xc1\x4c\x00\x00\x00")

func assetsEnvExampleBytes() ([]byte, error) {
	return bindataRead(
		_assetsEnvExample,
		"assets/.env.example",
	)
}

func assetsEnvExample() (*asset, error) {
	bytes, err := assetsEnvExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.env.example", size: 76, mode: os.FileMode(420), modTime: time.Unix(1675234235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsBluetoothToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x5b\x6b\xe4\x46\x13\x7d\xd7\xaf\x28\x34\x2c\x63\xc3\x58\x23\xcf\xc2\xf7\x30\x78\x3e\xd8\x84\xdd\x3c\x24\x2c\x81\x35\x1b\x88\x31\xa6\x47\x2a\x8d\x7a\xd3\xdd\x25\x77\x97\xe6\x92\xc5\xff\x3d\x54\x4b\x9a\x9b\x6d\xd8\x2c\x49\x1e\x8c\xd5\xdd\x55\xe7\xd4\xe5\x54\xcd\x08\x6e\x6b\x04\xa7\x2c\x02\x55\xc0\x35\x02\xba\xb2\x21\xed\x18\x2e\xda\x80\x25\x68\x17\x6f\x3d\x36\xe4\xf9\x32\x89\x96\x0b\x48\x7f\x30\x2d\x32\x11\xd7\x69\x92\x74\x18\x7b\x3f\x26\x28\x94\x31\x19\x7c\x56\x5e\xab\xa5\xc1\x00\x85\x72\xb0\x44\xd0\x8e\xd1\x37\x64\x14\x63\x09\x1b\xcd\x35\x7c\xfd\x0a\xd9\xaf\xca\x2b\xfb\x51\x70\x9f\x9e\xe0\xe2\x27\x02\x46\xdb\x88\x0d\x84\x9d\x63\xb5\xbd\xec\x08\x3c\x82\x92\x3f\x13\x08\x78\x43\xb0\x6c\xb5\x61\xed\xa0\x6a\x5d\xc1\x9a\x5c\x98\xc3\x47\xda\x80\x72\x25\xbc\x77\xeb\x64\x14\x4f\x3a\x40\xcc\x22\x92\x49\x1e\x15\x19\x43\x1b\xed\x56\x3d\xf8\x3c\x86\x20\xa6\xe9\x4d\x45\xde\x2a\xfe\x7f\x2a\x71\xec\xa8\x8d\x51\x57\xda\x95\xbd\xa3\x3c\x82\xc4\x31\x87\x9a\xb9\x09\xf3\xe9\xb4\xf9\x63\x95\xad\x28\x2b\x71\x3d\x65\x6d\x71\x74\xab\x2d\x66\x1f\xa2\x65\x32\x92\x30\xbe\x35\x00\x31\x4d\x6f\xd0\xad\x1f\xd6\xca\x3f\x48\x91\x63\x18\xc9\x52\x05\xbc\x6a\xbd\x81\x05\x8c\x07\x52\x4b\x4b\x6d\x34\xef\x32\xd5\xe8\x8c\x1a\x74\xa5\x62\x55\xb7\xcb\xac\x20\x3b\x5d\x0b\xda\xbb\x46\x7f\x46\x1f\x34\x39\x78\x7a\x9a\x56\x46\xf1\x74\xdf\xaf\x4f\xac\xa4\x5a\x87\x8b\x37\xb3\xfc\x47\x6a\x1d\xbf\x99\xe5\x1e\x0b\xf2\xe5\x74\x96\xcf\xae\xaf\xae\x67\x57\x6f\xaf\x6f\x67\x6f\xe7\x79\x3e\xcf\xf3\x2c\xcf\xf3\xdf\xe5\x61\x26\x0f\xb3\xb3\x87\xb1\x68\xe0\x17\x1d\x58\x34\x24\xc1\x07\xf9\x58\x2b\xa3\x4b\xc5\xe4\x03\x70\xad\x18\x42\x4d\xad\x29\xc1\x11\x8b\x16\x7c\xeb\x32\xf8\x19\xb1\x11\x85\xd9\xae\xca\x8a\x01\xb7\x8c\xde\x29\x73\xec\x2d\x6d\x17\xd4\xbe\x8a\x83\x49\x76\x13\xeb\x94\x8c\x44\x71\x4b\x64\x46\x0f\x61\x67\x97\x64\xf4\x9f\xd8\xa1\x71\x8d\xbb\xe8\x3e\xf8\x24\xb8\x2d\x4c\x5b\x62\x79\x75\x84\xbf\x80\xbb\x04\x00\x20\xf5\xca\xad\x30\x4d\xee\x07\x49\x3f\xb6\xe8\x77\xd0\x88\x3e\x91\x51\xf2\x20\x68\x54\x88\xff\x8f\x47\xe5\x1f\x94\xfa\xdd\x5d\x24\xbd\xbf\x4f\x9e\x4f\xe6\x59\x38\xfb\x59\x34\xda\x6a\x4e\x7b\x87\xb5\x32\xed\xab\x1e\xdd\xe3\x02\xd2\xab\xeb\x34\x39\xe2\x1a\x90\x4a\x1d\x58\xbb\x82\xd3\x83\x25\xfb\x16\x5f\xb4\x0d\x68\xf0\xc4\xd2\xc6\xaf\x89\x8d\x95\x95\x71\x98\xd8\x06\xbd\xa6\xf2\x45\xf7\x8d\x4c\xd2\xc1\x7b\x1c\x0a\x2a\x31\xc3\xc7\x2c\x8d\x03\xd9\xd5\x28\x1d\x20\xe4\xe1\xed\xff\xf2\x7c\x12\x54\xc1\x7a\x1d\x0d\x25\xb2\xf1\xd0\xaa\x7e\x3c\xfb\xbc\x3d\x86\x86\x5c\x40\xb8\xf8\x12\xc8\x01\x79\xd8\x5a\x73\x99\xf4\x46\x0b\x48\xe5\x3a\x6e\xae\xa1\x71\x50\x62\xa5\x9d\x8e\x8b\x24\x19\xc1\x07\xf2\xa0\x8c\x01\x47\x0e\x0a\x72\x81\x95\x63\x58\x0f\x4d\x9e\x44\x12\xd7\xda\x25\xfa\x5e\xe9\x2d\x06\xb0\x6d\x88\xd2\x96\xc7\x20\x09\xc8\x2e\xda\x68\x63\xe4\x72\x58\xa6\xe4\x4b\xf4\xc3\x8e\x3c\x5b\xb8\xa1\x5d\x7e\xc1\xa2\xdb\xa0\xb5\x68\x51\xf4\x30\xb0\xbe\x28\x89\xe7\x62\x90\xca\x89\x16\x7e\xab\x91\x6b\x61\x3a\xb6\x92\x75\xb4\x4f\x87\xbc\xcc\x62\xb2\x3f\x2f\xa0\x52\x26\x60\xcf\xd2\x50\x08\x5a\x0a\xd3\x27\xf7\x8c\xb0\xbf\xdf\x0f\xcf\xbb\x95\x6e\x1e\xde\x6b\x17\x18\xb5\x4b\x27\xf1\x72\xac\x94\x1a\xcb\x3c\x9d\xa4\x31\x84\x7a\x58\x53\xe9\x71\x14\xd2\xd7\x67\xe8\xb3\x7e\x2c\x3f\x15\x35\x5a\x75\xd4\xad\xa3\x96\xb7\x86\x93\xbb\xbb\xee\x23\x43\xc7\xaf\x8c\x51\xa5\xd1\x94\xfb\x20\xa8\xaa\x02\xee\xa7\x87\x77\xcd\xa9\x1d\x5c\x04\xf6\xda\xad\x26\x71\xa2\x57\xe8\x27\x50\x19\x52\x3c\x81\x25\x91\x41\xe5\x26\x40\xb1\x69\x97\x49\xf4\x5d\x40\xda\x1b\x0e\x90\x56\x3b\x6d\x5b\x7b\x3a\x98\x3d\x36\x39\xb3\x13\xe9\x0e\xe0\x51\x31\x11\xff\x12\x02\x46\x21\x38\x72\x08\xba\x8a\x6b\x53\x35\x8d\xd1\x85\x54\x31\xb1\xda\x09\x97\xbc\xee\x89\xd4\xf6\x7b\x88\x12\xab\xb6\xc7\x50\xc7\xc2\xe9\xbc\x75\x00\x8f\x8f\xad\xf6\x58\x0e\xa2\xd9\x9f\xfb\x76\x75\x11\x14\xb5\x36\xa5\x47\xf7\x1a\xf9\x50\xa9\x78\x1f\x9b\x1b\xa5\x71\xd6\xb1\xb3\xb5\xf6\xac\xac\x27\xa9\x9f\x04\x7f\x1e\xd5\xb7\xf1\xc8\xcf\xe7\x81\x46\x79\xaf\x76\x7f\x87\xe4\x0c\x38\xeb\x48\x8f\xf0\xf7\x5b\xf0\xdf\xc9\xe4\x05\xc2\xa8\x80\xff\x96\xaf\xdb\xf8\x07\xce\x6e\x6a\xbe\x97\xf2\xaf\x00\x00\x00\xff\xff\x0c\xd6\xf0\xff\x96\x0a\x00\x00")

func assetsBluetoothTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsBluetoothToml,
		"assets/bluetooth.toml",
	)
}

func assetsBluetoothToml() (*asset, error) {
	bytes, err := assetsBluetoothTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bluetooth.toml", size: 2710, mode: os.FileMode(420), modTime: time.Unix(1674655344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsBluetooth2Toml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcf\x6e\xdb\x30\x0c\xc6\xef\x7a\x0a\x41\x40\xe1\x4b\x62\x2b\x2e\xb0\x43\x80\x1c\xd6\x61\x3b\xee\xb2\x9d\x16\x04\x05\x63\xd1\x09\x07\xfd\x71\x24\x2a\x6b\x5a\xf4\xdd\x07\x39\x6d\x93\x16\xd9\x61\x03\xba\x9b\x69\x7e\xfc\x7e\xa4\x48\x0f\x0e\xe5\x42\xaa\x1b\x9b\x91\x43\xe0\x6d\xab\xc4\x1a\x12\x4e\x73\xb4\x72\x21\xab\x2d\xf3\x90\xe6\x4d\xe3\xc2\x9a\x2c\xf1\xa1\x86\x81\xea\x30\xa0\x37\xc0\xb0\xcd\xeb\xba\x0b\xae\xd9\xb7\x4d\x6f\x81\x9b\x17\x93\x6f\x0c\x4c\xc1\x9f\x7e\x5c\xb5\xfa\x53\xc8\x9e\xaf\x5a\x1d\xb1\x0b\xd1\x34\xad\x6e\x67\xd3\x59\x3b\xbd\x9e\x7d\x6f\xaf\xe7\x5a\xcf\xb5\xae\xb5\xd6\x3f\x4a\xa2\x2d\x89\xf6\x4d\xa2\x12\x78\xd7\xd9\x6c\xd0\x4c\xf7\x60\xc9\x00\x87\x98\xe4\x42\x2e\x57\xa2\x0f\xd1\x01\x97\x31\x7e\xa6\xe0\x95\x10\xcb\xe5\x2e\x63\x3c\xac\x56\xe2\x79\x3e\x4b\x8e\x58\x89\x3d\xd8\x3c\xc6\xd3\xd9\x45\x99\xa1\xc4\xe4\xbb\x73\x25\xc7\x8c\x17\xb5\x09\x2d\xbe\x52\xba\xf1\x6b\xe2\xc6\xf6\x98\x1c\x4e\xdc\x80\x91\x82\xb9\x58\xfe\x6b\x8b\x11\x4f\xd5\x55\xea\x82\xc1\x1a\x77\xb5\x7a\x78\x90\xf5\xd7\xa2\x7a\x7c\x54\xcf\x16\x25\x71\xfd\x41\xeb\x49\x82\x8e\x69\x3f\x0a\x4b\x67\x55\xb1\xde\x43\x24\x58\x5b\x3c\x73\x2f\xf5\x4a\x74\xc1\x27\x06\x5f\x9e\xa6\x07\x9b\xf0\x48\x1b\x5f\x4d\x48\x29\xa5\xfa\xb8\xa1\xe1\xf6\x33\xf9\xc4\x48\x5e\x4d\xc6\x9f\xd5\x4d\x0e\xf7\xf7\x74\xfb\x85\x30\x42\x25\x56\x85\x10\x31\x65\xcb\x35\x7a\x7e\x35\x43\xe8\xfb\x84\xac\x04\x1f\x86\x31\x26\xcf\xb8\xc1\xa8\x84\x23\x5f\x62\x1f\x3c\x2a\xe1\xe0\xee\x14\x44\xdc\x65\x8a\x68\xe4\x42\x96\xfe\x45\x4f\x68\xcd\xd3\x1e\xff\x0c\x7a\x5a\xdf\xbb\x73\xca\x55\x9f\x30\x10\x23\x1c\xfe\x06\xf2\xc6\xb8\x3e\x42\xcf\xfc\x5f\x0e\xe2\x7d\x26\xb9\x00\x1c\x37\xfe\x7f\x79\xc7\xe3\x3f\x31\x13\x47\xf2\x9b\x7f\x45\xfe\x0e\x00\x00\xff\xff\xeb\xb4\xc4\xeb\xa2\x04\x00\x00")

func assetsBluetooth2TomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsBluetooth2Toml,
		"assets/bluetooth2.toml",
	)
}

func assetsBluetooth2Toml() (*asset, error) {
	bytes, err := assetsBluetooth2TomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bluetooth2.toml", size: 1186, mode: os.FileMode(420), modTime: time.Unix(1674656375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsConfigExampleToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xdc\x36\x10\xbd\xf3\x57\x0c\xa4\x4b\x5b\x48\xda\x7c\xa0\x68\x10\x60\x81\x06\x71\xda\xb8\xa8\xbd\x45\xed\xf4\x62\x2c\x8c\xb1\x34\x5a\x0d\x4c\x91\x02\x39\xf2\xda\x3d\xf4\xb7\x17\x43\x49\xdb\x8d\xb3\x2d\x1a\xec\x45\x1c\xbe\x79\x7c\x33\x7c\x9c\xcd\xe1\xba\xe3\x08\x1c\x41\x3a\x02\x7a\xc4\x7e\xb0\x04\xb5\x77\x2d\xef\xc6\x80\xc2\xde\x41\xcb\x96\xa0\xf5\x21\x41\x36\x67\x1f\xe1\x0c\x05\xe1\xc2\x3b\x16\x1f\x2a\x63\xf2\x3c\x87\xb3\x77\x1f\x2e\x36\x97\xf0\x7e\x73\xf9\xd3\xf9\xcf\x9f\x7e\x7f\x77\x7d\xbe\xb9\x84\x3c\xcf\xcd\x4d\x83\xd4\x7b\xb7\x35\x39\x5c\x91\x24\x0a\x76\x42\xe1\x01\x2d\xb0\x83\x48\xb5\x77\x4d\xd4\xcf\x7d\xc7\x75\x97\x00\x53\x0a\xc4\xce\x8f\xb6\x81\x30\xba\x0a\xae\xbb\x24\xa1\x47\x51\xad\x75\xf0\x0e\xbe\xe9\x44\x86\xf8\x76\xb5\xda\xef\xf7\xd5\x9e\xef\x79\xa0\x86\xb1\xf2\x61\xb7\xd2\xd5\xea\x7d\xf0\xee\x5b\x73\x38\x6c\x0d\xd9\x77\x30\xff\x32\x33\xc9\x89\xb0\xef\x48\x3a\x0a\xa7\x8f\x05\x84\x07\xb4\xdc\x4c\x6d\xd0\xc0\x38\x28\x40\x30\xc8\x38\x98\x79\x8f\x4a\xef\xca\x39\x06\x6b\x68\xd1\x46\x52\xfe\x33\x6a\xd9\xf1\xa1\x83\xda\x61\x94\x29\x19\xf6\x2c\x5a\x2a\x47\x18\x02\xb5\xfc\x08\x18\x08\x9c\x17\x60\x57\xdb\xb1\xa1\xc6\xf0\xce\xf9\x40\xe5\xbc\xbd\x86\xec\x36\x33\x4b\x33\x2b\xeb\x77\xc7\x0d\xb5\x7e\x07\x96\x1e\xc8\x56\xf0\x87\x6a\x52\xd5\x23\x45\x25\x7d\x0b\x0d\xdd\x8d\xbb\x02\xd8\xb5\xbe\x80\x3d\x06\x57\x00\x85\xe0\x43\x01\x2d\x0a\xda\x02\x06\x74\x5c\x9b\x94\xaf\xe7\x28\x70\xe9\xcf\x81\x5d\x0b\xa8\xe0\x57\xc2\x07\x02\xea\x07\x79\x02\xf1\x69\x43\x3c\x44\x69\xfc\x28\x95\xc9\x93\x4f\xd6\x90\xfd\xb5\xc2\x81\x23\xb9\x48\x87\x0f\x55\x9c\x99\x05\x90\xe8\x3f\x38\xbc\xb3\xa4\xf5\x8b\x3c\x25\x2e\x3f\xca\x30\x4a\x35\x39\x72\xcf\xd6\x42\xed\xad\x0f\xfc\x27\x1d\x74\x4c\x10\x40\xd7\xc0\x10\xd8\x09\xb0\xb6\x0c\x10\x02\x61\x93\xf8\x26\x93\x54\x26\x87\xf3\x16\xa2\x96\xe0\xa7\x2b\x29\x9e\x93\xa4\x13\xee\xd4\x8e\xf0\xcb\xd5\xe6\xf2\x90\x39\x2b\x5a\x83\x84\x31\x5d\xe4\x7b\x55\xb1\x64\xe9\x63\x49\x57\xd3\x00\xb7\x4a\xb7\x63\x97\xda\xa0\xc5\x2d\x5d\xf3\x29\x37\x45\x7d\xa8\x69\xaa\x63\x01\x57\xb0\x71\xf6\x09\x3a\x8c\x80\x0e\xa8\x6d\xa9\x16\xe5\x9a\xcf\xe5\xb8\xc8\x56\x8e\xca\x24\x86\x72\x62\x58\x34\x2d\x3e\x70\x5e\xb8\xe5\x3a\xf9\x73\x31\xc4\xbf\x3b\x3a\x92\x6b\xe0\x38\x25\x56\x86\xd2\x2d\x34\xc7\xbe\xfd\x5a\x12\xf0\x5a\x0e\xb7\x09\x1c\x68\xf0\x41\x74\x80\x08\xb2\x8b\x93\xd5\x62\x65\x14\xa3\xef\x24\xad\x8f\x7a\xbb\x98\x8c\x7a\x64\x0b\xd8\x34\x81\x62\x4c\xae\xfa\xf2\x1c\xf1\x95\x99\x70\x6b\xc8\x7a\xfa\x71\x9e\x56\x55\xed\xfb\xcf\x0c\x7b\x75\x71\xfd\x1b\x44\x0a\x0f\x5a\x80\x87\x31\x4e\xd3\x4b\x19\xf5\xae\x9e\x75\x20\xf6\x32\x94\x33\x7a\x0d\x99\x2e\xab\xff\x64\x4e\x05\xfe\x4f\xde\x84\x5d\xc3\xf7\x6f\x7e\x98\xc6\xe4\xd5\xd5\xc7\x53\x33\x32\xc6\xee\xf8\x3d\x2b\xaa\xf3\x51\xbe\x78\x71\x68\xad\xdf\x03\xba\xa7\xb4\xad\x91\xda\x3b\x47\xb5\x98\xb4\x5e\x9e\xd6\x31\x8f\x2a\xa8\xcc\xac\xe3\xd5\xeb\x57\xaf\x5f\x4d\x4a\xae\x3f\x9d\x9f\x52\x22\x23\x1f\x2b\x51\x53\xef\x51\x6a\xf5\x42\xb4\x44\x03\x08\xf7\x9f\x5d\xdc\x64\xcc\x58\x77\xd4\xd3\xc9\xf1\x83\xe1\xbe\x00\xcb\xbb\x4e\x0a\xb0\x28\x42\x05\xb4\x01\x87\x81\x0a\xe8\xb1\xae\x3b\x46\xf1\x05\xf4\xbe\xee\xd0\x88\xb2\xa4\xdb\xd5\xa5\x0e\x3c\x1c\x78\xbb\xa8\x7f\xf3\xe2\xcd\x0b\x93\xdf\xfc\x33\x92\xb7\x26\xbf\x39\x5a\x56\xf4\x28\x14\x1c\xda\xed\xd6\xe4\x0e\x27\xa6\x06\x05\xcb\xce\x5b\xca\x4c\x3e\xa0\x74\x1a\xab\xaa\x95\x86\x6f\x35\x7c\x3b\xe7\xfb\xb0\x12\x0c\x3b\x92\x55\x20\x4b\x18\xe9\x14\x24\x33\x39\x86\x5d\x84\x35\xdc\x98\x1c\x00\x20\x2b\xcb\xe5\x0f\x26\x2b\xe6\xd0\xcb\xc3\x57\x59\x8e\x8e\xe5\xb0\xec\xfc\xa8\x0c\x5b\x93\xeb\xb4\x2a\xdb\xe0\xfb\x32\x4a\xc3\x6e\x79\x0f\x79\x9a\xc8\x87\xb7\x78\xba\xb8\x8a\x1e\x59\xca\xda\x37\x14\xb5\x4e\xfd\x80\x35\xbc\x30\xb9\xbf\x3f\xf0\x34\x14\xeb\xc0\x43\xfa\xef\x59\x43\x36\x60\x8c\xd4\x64\x5f\x45\xf8\x72\x26\x9c\xa5\x3c\x63\x6c\x91\x2d\x35\xd9\xdf\x01\x00\x00\xff\xff\x4a\x16\x07\x10\x3e\x08\x00\x00")

func assetsConfigExampleTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigExampleToml,
		"assets/config.example.toml",
	)
}

func assetsConfigExampleToml() (*asset, error) {
	bytes, err := assetsConfigExampleTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/config.example.toml", size: 2110, mode: os.FileMode(420), modTime: time.Unix(1675264211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsMochaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x41\x0a\xc3\x20\x10\x85\xe1\xfd\x9c\x42\xa6\x8b\xac\x0a\x35\x09\xd6\x2c\x72\x98\x51\xdf\xa4\x50\xa3\x20\x0d\xa5\xb7\x2f\x98\x4d\xb6\xdf\x7b\x7f\x91\x1d\x66\x35\xc3\x5e\xe3\x4b\x06\xa2\x20\xf1\xbd\xb5\x7a\x94\x64\x56\xc3\x37\x0b\x8b\x11\x4c\x5a\x1b\x2e\x1c\x53\x72\x3a\x5f\xf9\x2e\xf9\xd3\x27\x17\x9f\x0f\xef\x98\x1a\xce\xab\x4e\x3e\x88\x67\x0a\xf9\x40\x07\xbf\x84\x59\x85\x69\x6b\x40\xe9\x22\x0e\x93\x58\xa6\x1f\x72\xae\xdf\xb3\x5a\x30\x8a\xf2\x3f\x00\x00\xff\xff\x88\xfe\x80\x19\x9e\x00\x00\x00")

func assetsMochaTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMochaToml,
		"assets/mocha.toml",
	)
}

func assetsMochaToml() (*asset, error) {
	bytes, err := assetsMochaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/mocha.toml", size: 158, mode: os.FileMode(420), modTime: time.Unix(1675867010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.env.example":        assetsEnvExample,
	"assets/bluetooth.toml":      assetsBluetoothToml,
	"assets/bluetooth2.toml":     assetsBluetooth2Toml,
	"assets/config.example.toml": assetsConfigExampleToml,
	"assets/mocha.toml":          assetsMochaToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".env.example":        &bintree{assetsEnvExample, map[string]*bintree{}},
		"bluetooth.toml":      &bintree{assetsBluetoothToml, map[string]*bintree{}},
		"bluetooth2.toml":     &bintree{assetsBluetooth2Toml, map[string]*bintree{}},
		"config.example.toml": &bintree{assetsConfigExampleToml, map[string]*bintree{}},
		"mocha.toml":          &bintree{assetsMochaToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
