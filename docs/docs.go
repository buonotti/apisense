// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/health": {
            "get": {
                "description": "Get the health status of the API",
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "operationId": "health",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/reports": {
            "get": {
                "description": "Gets a list of all reports that can be filtered with a query",
                "tags": [
                    "reports"
                ],
                "summary": "Get all the reports",
                "operationId": "all-reports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "field.op.value",
                        "name": "where",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "json",
                        "name": "format",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/validation.Report"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/reports/:id": {
            "get": {
                "description": "Gets a single report identified by his id",
                "tags": [
                    "reports"
                ],
                "summary": "Get one report",
                "operationId": "report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "json",
                        "name": "format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "qNg8rJX",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/validation.Report"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "validation.Report": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Id is a unique identifier for each report",
                    "type": "string"
                },
                "results": {
                    "description": "Endpoints is a collection of ValidatedEndpoint holding the validation results",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/validation.ValidatedEndpoint"
                    }
                },
                "time": {
                    "description": "Time is the timestamp of the report",
                    "type": "string"
                }
            }
        },
        "validation.Result": {
            "type": "object",
            "properties": {
                "url": {
                    "description": "Url is the url of the api call (with query parameters)",
                    "type": "string"
                },
                "validatorsOutput": {
                    "description": "ValidatorsOutput is the collection of ValidatorOutput that describe the result of each validator",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/validation.ValidatorOutput"
                    }
                }
            }
        },
        "validation.ValidatedEndpoint": {
            "type": "object",
            "properties": {
                "endpointName": {
                    "description": "EndpointName is he name of the endpoint",
                    "type": "string"
                },
                "results": {
                    "description": "Results are the collection of Result that describe the result of validating a single api call",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/validation.Result"
                    }
                }
            }
        },
        "validation.ValidatorOutput": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error is the error message of the validator",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the validator (success/fail/skipped)",
                    "type": "string"
                },
                "validator": {
                    "description": "Validator is the name of the validator",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
