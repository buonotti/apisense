// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/.env.example
// assets/bluetooth.definition.toml
// assets/config.example.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsEnvExample = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x77\xf1\x8d\x77\xf5\x75\xf4\xf4\x89\x0f\x0d\x76\x0d\xb2\xcd\x4d\x75\x48\xad\x48\xcc\x2d\xc8\x49\xd5\x4b\xce\xcf\xe5\x42\xc8\x06\x38\x06\x07\xdb\x16\x97\x16\xa4\x16\xe9\x16\xa7\x26\x17\xa5\x96\xe8\x15\x24\x16\x17\x97\xe7\x17\xa5\x00\x02\x00\x00\xff\xff\x4d\x5f\x22\xbe\x42\x00\x00\x00")

func assetsEnvExampleBytes() ([]byte, error) {
	return bindataRead(
		_assetsEnvExample,
		"assets/.env.example",
	)
}

func assetsEnvExample() (*asset, error) {
	bytes, err := assetsEnvExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.env.example", size: 66, mode: os.FileMode(420), modTime: time.Unix(1673517048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsBluetoothDefinitionToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x5b\x6b\xe4\x46\x13\x7d\xd7\xaf\x28\x34\x2c\x63\xc3\x58\x23\xcf\xc2\xf7\x30\x78\x3e\xd8\x84\xdd\x3c\x24\x2c\x81\x35\x1b\x88\x31\xa6\x47\x2a\x8d\x7a\xd3\xdd\x25\x77\x97\xe6\x92\xc5\xff\x3d\x54\x4b\x9a\x9b\x6d\xd8\x2c\x49\x1e\x8c\xd5\xdd\x55\xe7\xd4\xe5\x54\xcd\x08\x6e\x6b\x04\xa7\x2c\x02\x55\xc0\x35\x02\xba\xb2\x21\xed\x18\x2e\xda\x80\x25\x68\x17\x6f\x3d\x36\xe4\xf9\x32\x89\x96\x0b\x48\x7f\x30\x2d\x32\x11\xd7\x69\x92\x74\x18\x7b\x3f\x26\x28\x94\x31\x19\x7c\x56\x5e\xab\xa5\xc1\x00\x85\x72\xb0\x44\xd0\x8e\xd1\x37\x64\x14\x63\x09\x1b\xcd\x35\x7c\xfd\x0a\xd9\xaf\xca\x2b\xfb\x51\x70\x9f\x9e\xe0\xe2\x27\x02\x46\xdb\x88\x0d\x84\x9d\x63\xb5\xbd\xec\x08\x3c\x82\x92\x3f\x13\x08\x78\x43\xb0\x6c\xb5\x61\xed\xa0\x6a\x5d\xc1\x9a\x5c\x98\xc3\x47\xda\x80\x72\x25\xbc\x77\xeb\x64\x14\x4f\x3a\x40\xcc\x22\x92\x49\x1e\x15\x19\x43\x1b\xed\x56\x3d\xf8\x3c\x86\x20\xa6\xe9\x4d\x45\xde\x2a\xfe\x7f\x2a\x71\xec\xa8\x8d\x51\x57\xda\x95\xbd\xa3\x3c\x82\xc4\x31\x87\x9a\xb9\x09\xf3\xe9\xb4\xf9\x63\x95\xad\x28\x2b\x71\x3d\x65\x6d\x71\x74\xab\x2d\x66\x1f\xa2\x65\x32\x92\x30\xbe\x35\x00\x31\x4d\x6f\xd0\xad\x1f\xd6\xca\x3f\x48\x91\x63\x18\xc9\x52\x05\xbc\x6a\xbd\x81\x05\x8c\x07\x52\x4b\x4b\x6d\x34\xef\x32\xd5\xe8\x8c\x1a\x74\xa5\x62\x55\xb7\xcb\xac\x20\x3b\x5d\x0b\xda\xbb\x46\x7f\x46\x1f\x34\x39\x78\x7a\x9a\x56\x46\xf1\x74\xdf\xaf\x4f\xac\xa4\x5a\x87\x8b\x37\xb3\xfc\x47\x6a\x1d\xbf\x99\xe5\x1e\x0b\xf2\xe5\x74\x96\xcf\xae\xaf\xae\x67\x57\x6f\xaf\x6f\x67\x6f\xe7\x79\x3e\xcf\xf3\x2c\xcf\xf3\xdf\xe5\x61\x26\x0f\xb3\xb3\x87\xb1\x68\xe0\x17\x1d\x58\x34\x24\xc1\x07\xf9\x58\x2b\xa3\x4b\xc5\xe4\x03\x70\xad\x18\x42\x4d\xad\x29\xc1\x11\x8b\x16\x7c\xeb\x32\xf8\x19\xb1\x11\x85\xd9\xae\xca\x8a\x01\xb7\x8c\xde\x29\x73\xec\x2d\x6d\x17\xd4\xbe\x8a\x83\x49\x76\x13\xeb\x94\x8c\x44\x71\x4b\x64\x46\x0f\x61\x67\x97\x64\xf4\x9f\xd8\xa1\x71\x8d\xbb\xe8\x3e\xf8\x24\xb8\x2d\x4c\x5b\x62\x79\x75\x84\xbf\x80\xbb\x04\x00\x20\xf5\xca\xad\x30\x4d\xee\x07\x49\x3f\xb6\xe8\x77\xd0\x88\x3e\x91\x51\xf2\x20\x68\x54\x88\xff\x8f\x47\xe5\x1f\x94\xfa\xdd\x5d\x24\xbd\xbf\x4f\x9e\x4f\xe6\x59\x38\xfb\x59\x34\xda\x6a\x4e\x7b\x87\xb5\x32\xed\xab\x1e\xdd\xe3\x02\xd2\xab\xeb\x34\x39\xe2\x1a\x90\x4a\x1d\x58\xbb\x82\xd3\x83\x25\xfb\x16\x5f\xb4\x0d\x68\xf0\xc4\xd2\xc6\xaf\x89\x8d\x95\x95\x71\x98\xd8\x06\xbd\xa6\xf2\x45\xf7\x8d\x4c\xd2\xc1\x7b\x1c\x0a\x2a\x31\xc3\xc7\x2c\x8d\x03\xd9\xd5\x28\x1d\x20\xe4\xe1\xed\xff\xf2\x7c\x12\x54\xc1\x7a\x1d\x0d\x25\xb2\xf1\xd0\xaa\x7e\x3c\xfb\xbc\x3d\x86\x86\x5c\x40\xb8\xf8\x12\xc8\x01\x79\xd8\x5a\x73\x99\xf4\x46\x0b\x48\xe5\x3a\x6e\xae\xa1\x71\x50\x62\xa5\x9d\x8e\x8b\x24\x19\xc1\x07\xf2\xa0\x8c\x01\x47\x0e\x0a\x72\x81\x95\x63\x58\x0f\x4d\x9e\x44\x12\xd7\xda\x25\xfa\x5e\xe9\x2d\x06\xb0\x6d\x88\xd2\x96\xc7\x20\x09\xc8\x2e\xda\x68\x63\xe4\x72\x58\xa6\xe4\x4b\xf4\xc3\x8e\x3c\x5b\xb8\xa1\x5d\x7e\xc1\xa2\xdb\xa0\xb5\x68\x51\xf4\x30\xb0\xbe\x28\x89\xe7\x62\x90\xca\x89\x16\x7e\xab\x91\x6b\x61\x3a\xb6\x92\x75\xb4\x4f\x87\xbc\xcc\x62\xb2\x3f\x2f\xa0\x52\x26\x60\xcf\xd2\x50\x08\x5a\x0a\xd3\x27\xf7\x8c\xb0\xbf\xdf\x0f\xcf\xbb\x95\x6e\x1e\xde\x6b\x17\x18\xb5\x4b\x27\xf1\x72\xac\x94\x1a\xcb\x3c\x9d\xa4\x31\x84\x7a\x58\x53\xe9\x71\x14\xd2\xd7\x67\xe8\xb3\x7e\x2c\x3f\x15\x35\x5a\x75\xd4\xad\xa3\x96\xb7\x86\x93\xbb\xbb\xee\x23\x43\xc7\xaf\x8c\x51\xa5\xd1\x94\xfb\x20\xa8\xaa\x02\xee\xa7\x87\x77\xcd\xa9\x1d\x5c\x04\xf6\xda\xad\x26\x71\xa2\x57\xe8\x27\x50\x19\x52\x3c\x81\x25\x91\x41\xe5\x26\x40\xb1\x69\x97\x49\xf4\x5d\x40\xda\x1b\x0e\x90\x56\x3b\x6d\x5b\x7b\x3a\x98\x3d\x36\x39\xb3\x13\xe9\x0e\xe0\x51\x31\x11\xff\x12\x02\x46\x21\x38\x72\x08\xba\x8a\x6b\x53\x35\x8d\xd1\x85\x54\x31\xb1\xda\x09\x97\xbc\xee\x89\xd4\xf6\x7b\x88\x12\xab\xb6\xc7\x50\xc7\xc2\xe9\xbc\x75\x00\x8f\x8f\xad\xf6\x58\x0e\xa2\xd9\x9f\xfb\x76\x75\x11\x14\xb5\x36\xa5\x47\xf7\x1a\xf9\x50\xa9\x78\x1f\x9b\x1b\xa5\x71\xd6\xb1\xb3\xb5\xf6\xac\xac\x27\xa9\x9f\x04\x7f\x1e\xd5\xb7\xf1\xc8\xcf\xe7\x81\x46\x79\xaf\x76\x7f\x87\xe4\x0c\x38\xeb\x48\x8f\xf0\xf7\x5b\xf0\xdf\xc9\xe4\x05\xc2\xa8\x80\xff\x96\xaf\xdb\xf8\x07\xce\x6e\x6a\xbe\x97\xf2\xaf\x00\x00\x00\xff\xff\x0c\xd6\xf0\xff\x96\x0a\x00\x00")

func assetsBluetoothDefinitionTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsBluetoothDefinitionToml,
		"assets/bluetooth.definition.toml",
	)
}

func assetsBluetoothDefinitionToml() (*asset, error) {
	bytes, err := assetsBluetoothDefinitionTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bluetooth.definition.toml", size: 2710, mode: os.FileMode(420), modTime: time.Unix(1673360661, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsConfigExampleToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x51\x6f\xe4\x34\x10\x7e\xf7\xaf\x18\x65\x5f\x00\x6d\xbc\xdc\x9d\x10\xe8\xa4\x48\x9c\xae\x07\x57\x44\xbb\x88\xf6\x78\xa9\x56\x95\x1b\x4f\x36\xd6\x39\x9e\xc8\x9e\x34\x2d\x0f\xfc\x76\x34\x4e\xb2\x2c\xed\x82\x7a\xea\x43\xe3\xf1\x37\x9f\xbf\xf9\x3c\x9e\x5d\xc1\x75\xeb\x12\xb8\x04\xdc\x22\xe0\x83\xe9\x7a\x8f\x50\x53\x68\xdc\x7e\x88\x86\x1d\x05\x68\x9c\x47\x68\x28\x66\xc8\xf6\xec\x23\x9c\x19\x36\x70\x41\xc1\x31\x45\xad\xd4\x6a\xb5\x82\xb3\x77\x1f\x2e\xb6\x97\xf0\x7e\x7b\xf9\xd3\xf9\xcf\x9f\x7e\x7f\x77\x7d\xbe\xbd\x84\xd5\x6a\xa5\x6e\xac\xc1\x8e\xc2\x4e\xad\xe0\x0a\x39\x53\xb8\xc0\x18\xef\x8d\x07\x17\x20\x61\x4d\xc1\x26\xf9\x1c\x5b\x57\xb7\x19\x30\xa5\x40\x6a\x69\xf0\x16\xe2\x10\x34\x5c\xb7\x59\x42\x67\x58\xb4\xd6\x91\x02\x7c\xd5\x32\xf7\xe9\xed\x66\x33\x8e\xa3\x1e\xdd\x67\xd7\xa3\x75\x46\x53\xdc\x6f\x64\xb5\x79\x1f\x29\x7c\xad\x0e\x87\x55\x50\x7c\x03\xf3\x5f\xa1\x26\x39\x09\xc6\x16\xb9\xc5\x78\xfa\x58\x30\x70\x6f\xbc\xb3\x93\x0d\x12\x18\x7a\x01\xb0\x89\x3c\xf4\x6a\xde\xc3\x92\x42\x39\xc7\xa0\x82\xc6\xf8\x84\xc2\x7f\x86\x8d\x0b\xee\xe0\xa0\x38\x6c\x78\x4a\x86\xd1\xb1\x94\xea\x12\xf4\x11\x1b\xf7\x00\x26\x22\x04\x62\x70\xa1\xf6\x83\x45\xab\xdc\x3e\x50\xc4\x72\xde\xae\xa0\xb8\x2d\xd4\x62\xa6\xf6\xb4\x3f\x36\xd4\xd3\x1e\x3c\xde\xa3\xd7\xf0\x87\x68\x12\xd5\x03\x26\x21\x7d\x0b\x16\xef\x86\xfd\x1a\x5c\x68\x68\x0d\xa3\x89\x61\x0d\x18\x23\xc5\x35\x34\x86\x8d\x5f\x43\x6f\x82\xab\x55\xce\x97\x73\x04\xb8\xf8\x73\x60\x97\x02\x34\xfc\x8a\xe6\x1e\x01\xbb\x9e\x1f\x81\x29\x6f\x30\x41\x62\x4b\x03\x6b\xb5\xca\x7d\x52\x41\xf1\xd7\xc6\xf4\x2e\x61\x48\x78\xf8\x10\xc5\x85\x5a\x00\x99\xfe\x43\x30\x77\x1e\xa5\x7e\xe6\xc7\xcc\x45\x03\xf7\x03\xeb\xa9\x23\x47\xe7\x3d\xd4\xe4\x29\xba\x3f\xf1\xa0\x63\x82\x80\x09\x16\xfa\xe8\x02\x83\x13\xcb\xc0\x40\x44\x63\x33\xdf\xd4\x24\x5a\xad\xe0\xbc\x81\x24\x25\xd0\x74\x25\xeb\xa7\x24\xf9\x84\x3b\x69\x47\xf8\xe5\x6a\x7b\x79\xc8\x9c\x15\x55\xc0\x71\xc8\x17\xf9\x5e\x54\x2c\x59\xf2\x58\xf2\xd5\x58\x70\x8d\xd0\xed\x5d\xc8\x36\x48\x71\x8b\x6b\x94\x73\x73\x94\x62\x8d\x53\x1d\x0b\x58\xc3\x36\xf8\x47\x68\x4d\x02\x13\x00\x9b\x06\x6b\x16\xae\xf9\x5c\x97\x16\xd9\xc2\xa1\x55\x66\x28\x27\x86\x45\xd3\xd2\x07\x81\xd8\x35\xae\xce\xfd\xb9\x34\xc4\x7f\x77\x74\xc2\x60\xe1\x38\x25\x69\x85\xf9\x16\xec\x71\xdf\x7e\x29\x09\x90\x94\xe3\x9a\x0c\x8e\xd8\x53\x64\x19\x20\x6c\x5c\x48\x53\xab\x25\xad\x04\x23\xef\x24\xaf\x8f\xbc\x5d\x9a\x0c\x3b\xe3\x3c\x18\x6b\x23\xa6\x94\xbb\xea\xf9\x39\x4c\x5a\x4d\xb8\x0a\x8a\x0e\x7f\x9c\xa7\x95\xae\xa9\xfb\x57\xc3\x5e\x5d\x5c\xff\x06\x09\xe3\xbd\x14\x40\x30\xa4\x69\x7a\x09\xa3\xdc\xd5\x13\x07\x52\xc7\x7d\x39\xa3\x2b\x28\x64\xa9\xff\x97\x39\x17\xf8\x42\xde\x8c\xad\xe0\xbb\x1f\xbe\x7f\x46\x33\x24\x8c\xc1\x74\xf8\x52\xaa\x03\xbe\x82\x62\xd6\x77\x42\x9b\x49\x69\xa4\x68\x5f\xac\x6f\xc1\x57\x50\x2c\xdf\xc5\x34\xd1\xaf\xae\x3e\x9e\x1a\xe7\x29\xb5\xc7\xa3\x47\x50\x2d\x25\x7e\x36\x1c\x8c\xf7\x34\x82\x09\x8f\x79\x5b\x22\x35\x85\x80\x35\xab\xbc\x5e\xa6\xc0\x31\x8f\x98\xa5\xd5\x6c\xd9\xeb\x37\xaf\xdf\xbc\x9e\x94\x5c\x7f\x3a\x3f\xa5\x84\x07\x77\xac\x44\xde\xdf\x68\xb8\x96\xb6\x4d\x1e\xb1\x07\x76\x1d\x2a\xa5\x6e\x4c\xef\x76\x4a\xdd\xfc\x33\xca\x77\xea\xe6\x68\xa5\xf1\x81\xc5\x5a\xbf\xdb\xa9\xc5\x60\x6b\xd8\x94\x2d\x89\xc5\xbd\xe1\x56\x42\x5a\x6f\x24\x7a\x2b\xd1\xdb\x39\x9b\xe2\x86\x4d\xdc\x23\x6f\x22\x7a\x34\x09\x4f\x41\x0a\x65\xe2\x3e\x41\x05\x37\x0a\x00\xa0\x28\xcb\xe5\x37\xa9\x58\x4f\x91\x57\xcb\x47\x59\x0e\xc1\xf1\xb2\x6a\x69\x88\x85\xda\x29\x99\x6d\x65\x13\xa9\x2b\x13\x5b\x17\x96\xd7\x93\xc7\xf7\xe1\xe1\x9e\xac\x48\xe3\x83\xe3\xb2\x26\x8b\x69\xb7\x53\xf2\x1f\x2a\xf8\x56\xd1\xe7\x85\xc3\x62\xaa\xa3\xeb\xf3\x8f\xd4\xdc\x02\x68\x8b\x2f\x20\x7b\x35\x91\x4d\x1a\x9e\xb0\x35\xc6\x79\xb4\xc5\xdf\x01\x00\x00\xff\xff\x8f\xb3\xf8\x22\x63\x08\x00\x00")

func assetsConfigExampleTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigExampleToml,
		"assets/config.example.toml",
	)
}

func assetsConfigExampleToml() (*asset, error) {
	bytes, err := assetsConfigExampleTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/config.example.toml", size: 2147, mode: os.FileMode(420), modTime: time.Unix(1674200511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.env.example":              assetsEnvExample,
	"assets/bluetooth.definition.toml": assetsBluetoothDefinitionToml,
	"assets/config.example.toml":       assetsConfigExampleToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".env.example":              &bintree{assetsEnvExample, map[string]*bintree{}},
		"bluetooth.definition.toml": &bintree{assetsBluetoothDefinitionToml, map[string]*bintree{}},
		"config.example.toml":       &bintree{assetsConfigExampleToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
