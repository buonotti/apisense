// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/.env.example
// assets/bluetooth.toml
// assets/bluetooth2.toml
// assets/config.example.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsEnvExample = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x77\xf1\x8d\x77\xf5\x75\xf4\xf4\x89\x0f\x0d\x76\x0d\xb2\xcd\x4d\x75\x48\xad\x48\xcc\x2d\xc8\x49\xd5\x4b\xce\xcf\xe5\x42\xc8\x06\x38\x06\x07\xdb\x16\x97\x16\xa4\x16\xe9\x16\xa7\x26\x17\xa5\x96\xe8\x15\x24\x16\x17\x97\xe7\x17\xa5\x00\x02\x00\x00\xff\xff\x4d\x5f\x22\xbe\x42\x00\x00\x00")

func assetsEnvExampleBytes() ([]byte, error) {
	return bindataRead(
		_assetsEnvExample,
		"assets/.env.example",
	)
}

func assetsEnvExample() (*asset, error) {
	bytes, err := assetsEnvExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.env.example", size: 66, mode: os.FileMode(420), modTime: time.Unix(1674655344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsBluetoothToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x5b\x6b\xe4\x46\x13\x7d\xd7\xaf\x28\x34\x2c\x63\xc3\x58\x23\xcf\xc2\xf7\x30\x78\x3e\xd8\x84\xdd\x3c\x24\x2c\x81\x35\x1b\x88\x31\xa6\x47\x2a\x8d\x7a\xd3\xdd\x25\x77\x97\xe6\x92\xc5\xff\x3d\x54\x4b\x9a\x9b\x6d\xd8\x2c\x49\x1e\x8c\xd5\xdd\x55\xe7\xd4\xe5\x54\xcd\x08\x6e\x6b\x04\xa7\x2c\x02\x55\xc0\x35\x02\xba\xb2\x21\xed\x18\x2e\xda\x80\x25\x68\x17\x6f\x3d\x36\xe4\xf9\x32\x89\x96\x0b\x48\x7f\x30\x2d\x32\x11\xd7\x69\x92\x74\x18\x7b\x3f\x26\x28\x94\x31\x19\x7c\x56\x5e\xab\xa5\xc1\x00\x85\x72\xb0\x44\xd0\x8e\xd1\x37\x64\x14\x63\x09\x1b\xcd\x35\x7c\xfd\x0a\xd9\xaf\xca\x2b\xfb\x51\x70\x9f\x9e\xe0\xe2\x27\x02\x46\xdb\x88\x0d\x84\x9d\x63\xb5\xbd\xec\x08\x3c\x82\x92\x3f\x13\x08\x78\x43\xb0\x6c\xb5\x61\xed\xa0\x6a\x5d\xc1\x9a\x5c\x98\xc3\x47\xda\x80\x72\x25\xbc\x77\xeb\x64\x14\x4f\x3a\x40\xcc\x22\x92\x49\x1e\x15\x19\x43\x1b\xed\x56\x3d\xf8\x3c\x86\x20\xa6\xe9\x4d\x45\xde\x2a\xfe\x7f\x2a\x71\xec\xa8\x8d\x51\x57\xda\x95\xbd\xa3\x3c\x82\xc4\x31\x87\x9a\xb9\x09\xf3\xe9\xb4\xf9\x63\x95\xad\x28\x2b\x71\x3d\x65\x6d\x71\x74\xab\x2d\x66\x1f\xa2\x65\x32\x92\x30\xbe\x35\x00\x31\x4d\x6f\xd0\xad\x1f\xd6\xca\x3f\x48\x91\x63\x18\xc9\x52\x05\xbc\x6a\xbd\x81\x05\x8c\x07\x52\x4b\x4b\x6d\x34\xef\x32\xd5\xe8\x8c\x1a\x74\xa5\x62\x55\xb7\xcb\xac\x20\x3b\x5d\x0b\xda\xbb\x46\x7f\x46\x1f\x34\x39\x78\x7a\x9a\x56\x46\xf1\x74\xdf\xaf\x4f\xac\xa4\x5a\x87\x8b\x37\xb3\xfc\x47\x6a\x1d\xbf\x99\xe5\x1e\x0b\xf2\xe5\x74\x96\xcf\xae\xaf\xae\x67\x57\x6f\xaf\x6f\x67\x6f\xe7\x79\x3e\xcf\xf3\x2c\xcf\xf3\xdf\xe5\x61\x26\x0f\xb3\xb3\x87\xb1\x68\xe0\x17\x1d\x58\x34\x24\xc1\x07\xf9\x58\x2b\xa3\x4b\xc5\xe4\x03\x70\xad\x18\x42\x4d\xad\x29\xc1\x11\x8b\x16\x7c\xeb\x32\xf8\x19\xb1\x11\x85\xd9\xae\xca\x8a\x01\xb7\x8c\xde\x29\x73\xec\x2d\x6d\x17\xd4\xbe\x8a\x83\x49\x76\x13\xeb\x94\x8c\x44\x71\x4b\x64\x46\x0f\x61\x67\x97\x64\xf4\x9f\xd8\xa1\x71\x8d\xbb\xe8\x3e\xf8\x24\xb8\x2d\x4c\x5b\x62\x79\x75\x84\xbf\x80\xbb\x04\x00\x20\xf5\xca\xad\x30\x4d\xee\x07\x49\x3f\xb6\xe8\x77\xd0\x88\x3e\x91\x51\xf2\x20\x68\x54\x88\xff\x8f\x47\xe5\x1f\x94\xfa\xdd\x5d\x24\xbd\xbf\x4f\x9e\x4f\xe6\x59\x38\xfb\x59\x34\xda\x6a\x4e\x7b\x87\xb5\x32\xed\xab\x1e\xdd\xe3\x02\xd2\xab\xeb\x34\x39\xe2\x1a\x90\x4a\x1d\x58\xbb\x82\xd3\x83\x25\xfb\x16\x5f\xb4\x0d\x68\xf0\xc4\xd2\xc6\xaf\x89\x8d\x95\x95\x71\x98\xd8\x06\xbd\xa6\xf2\x45\xf7\x8d\x4c\xd2\xc1\x7b\x1c\x0a\x2a\x31\xc3\xc7\x2c\x8d\x03\xd9\xd5\x28\x1d\x20\xe4\xe1\xed\xff\xf2\x7c\x12\x54\xc1\x7a\x1d\x0d\x25\xb2\xf1\xd0\xaa\x7e\x3c\xfb\xbc\x3d\x86\x86\x5c\x40\xb8\xf8\x12\xc8\x01\x79\xd8\x5a\x73\x99\xf4\x46\x0b\x48\xe5\x3a\x6e\xae\xa1\x71\x50\x62\xa5\x9d\x8e\x8b\x24\x19\xc1\x07\xf2\xa0\x8c\x01\x47\x0e\x0a\x72\x81\x95\x63\x58\x0f\x4d\x9e\x44\x12\xd7\xda\x25\xfa\x5e\xe9\x2d\x06\xb0\x6d\x88\xd2\x96\xc7\x20\x09\xc8\x2e\xda\x68\x63\xe4\x72\x58\xa6\xe4\x4b\xf4\xc3\x8e\x3c\x5b\xb8\xa1\x5d\x7e\xc1\xa2\xdb\xa0\xb5\x68\x51\xf4\x30\xb0\xbe\x28\x89\xe7\x62\x90\xca\x89\x16\x7e\xab\x91\x6b\x61\x3a\xb6\x92\x75\xb4\x4f\x87\xbc\xcc\x62\xb2\x3f\x2f\xa0\x52\x26\x60\xcf\xd2\x50\x08\x5a\x0a\xd3\x27\xf7\x8c\xb0\xbf\xdf\x0f\xcf\xbb\x95\x6e\x1e\xde\x6b\x17\x18\xb5\x4b\x27\xf1\x72\xac\x94\x1a\xcb\x3c\x9d\xa4\x31\x84\x7a\x58\x53\xe9\x71\x14\xd2\xd7\x67\xe8\xb3\x7e\x2c\x3f\x15\x35\x5a\x75\xd4\xad\xa3\x96\xb7\x86\x93\xbb\xbb\xee\x23\x43\xc7\xaf\x8c\x51\xa5\xd1\x94\xfb\x20\xa8\xaa\x02\xee\xa7\x87\x77\xcd\xa9\x1d\x5c\x04\xf6\xda\xad\x26\x71\xa2\x57\xe8\x27\x50\x19\x52\x3c\x81\x25\x91\x41\xe5\x26\x40\xb1\x69\x97\x49\xf4\x5d\x40\xda\x1b\x0e\x90\x56\x3b\x6d\x5b\x7b\x3a\x98\x3d\x36\x39\xb3\x13\xe9\x0e\xe0\x51\x31\x11\xff\x12\x02\x46\x21\x38\x72\x08\xba\x8a\x6b\x53\x35\x8d\xd1\x85\x54\x31\xb1\xda\x09\x97\xbc\xee\x89\xd4\xf6\x7b\x88\x12\xab\xb6\xc7\x50\xc7\xc2\xe9\xbc\x75\x00\x8f\x8f\xad\xf6\x58\x0e\xa2\xd9\x9f\xfb\x76\x75\x11\x14\xb5\x36\xa5\x47\xf7\x1a\xf9\x50\xa9\x78\x1f\x9b\x1b\xa5\x71\xd6\xb1\xb3\xb5\xf6\xac\xac\x27\xa9\x9f\x04\x7f\x1e\xd5\xb7\xf1\xc8\xcf\xe7\x81\x46\x79\xaf\x76\x7f\x87\xe4\x0c\x38\xeb\x48\x8f\xf0\xf7\x5b\xf0\xdf\xc9\xe4\x05\xc2\xa8\x80\xff\x96\xaf\xdb\xf8\x07\xce\x6e\x6a\xbe\x97\xf2\xaf\x00\x00\x00\xff\xff\x0c\xd6\xf0\xff\x96\x0a\x00\x00")

func assetsBluetoothTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsBluetoothToml,
		"assets/bluetooth.toml",
	)
}

func assetsBluetoothToml() (*asset, error) {
	bytes, err := assetsBluetoothTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bluetooth.toml", size: 2710, mode: os.FileMode(420), modTime: time.Unix(1674655344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsBluetooth2Toml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcf\x6e\xdb\x30\x0c\xc6\xef\x7a\x0a\x41\x40\xe1\x4b\x62\x2b\x2e\xb0\x43\x80\x1c\xd6\x61\x3b\xee\xb2\x9d\x16\x04\x05\x63\xd1\x09\x07\xfd\x71\x24\x2a\x6b\x5a\xf4\xdd\x07\x39\x6d\x93\x16\xd9\x61\x03\xba\x9b\x69\x7e\xfc\x7e\xa4\x48\x0f\x0e\xe5\x42\xaa\x1b\x9b\x91\x43\xe0\x6d\xab\xc4\x1a\x12\x4e\x73\xb4\x72\x21\xab\x2d\xf3\x90\xe6\x4d\xe3\xc2\x9a\x2c\xf1\xa1\x86\x81\xea\x30\xa0\x37\xc0\xb0\xcd\xeb\xba\x0b\xae\xd9\xb7\x4d\x6f\x81\x9b\x17\x93\x6f\x0c\x4c\xc1\x9f\x7e\x5c\xb5\xfa\x53\xc8\x9e\xaf\x5a\x1d\xb1\x0b\xd1\x34\xad\x6e\x67\xd3\x59\x3b\xbd\x9e\x7d\x6f\xaf\xe7\x5a\xcf\xb5\xae\xb5\xd6\x3f\x4a\xa2\x2d\x89\xf6\x4d\xa2\x12\x78\xd7\xd9\x6c\xd0\x4c\xf7\x60\xc9\x00\x87\x98\xe4\x42\x2e\x57\xa2\x0f\xd1\x01\x97\x31\x7e\xa6\xe0\x95\x10\xcb\xe5\x2e\x63\x3c\xac\x56\xe2\x79\x3e\x4b\x8e\x58\x89\x3d\xd8\x3c\xc6\xd3\xd9\x45\x99\xa1\xc4\xe4\xbb\x73\x25\xc7\x8c\x17\xb5\x09\x2d\xbe\x52\xba\xf1\x6b\xe2\xc6\xf6\x98\x1c\x4e\xdc\x80\x91\x82\xb9\x58\xfe\x6b\x8b\x11\x4f\xd5\x55\xea\x82\xc1\x1a\x77\xb5\x7a\x78\x90\xf5\xd7\xa2\x7a\x7c\x54\xcf\x16\x25\x71\xfd\x41\xeb\x49\x82\x8e\x69\x3f\x0a\x4b\x67\x55\xb1\xde\x43\x24\x58\x5b\x3c\x73\x2f\xf5\x4a\x74\xc1\x27\x06\x5f\x9e\xa6\x07\x9b\xf0\x48\x1b\x5f\x4d\x48\x29\xa5\xfa\xb8\xa1\xe1\xf6\x33\xf9\xc4\x48\x5e\x4d\xc6\x9f\xd5\x4d\x0e\xf7\xf7\x74\xfb\x85\x30\x42\x25\x56\x85\x10\x31\x65\xcb\x35\x7a\x7e\x35\x43\xe8\xfb\x84\xac\x04\x1f\x86\x31\x26\xcf\xb8\xc1\xa8\x84\x23\x5f\x62\x1f\x3c\x2a\xe1\xe0\xee\x14\x44\xdc\x65\x8a\x68\xe4\x42\x96\xfe\x45\x4f\x68\xcd\xd3\x1e\xff\x0c\x7a\x5a\xdf\xbb\x73\xca\x55\x9f\x30\x10\x23\x1c\xfe\x06\xf2\xc6\xb8\x3e\x42\xcf\xfc\x5f\x0e\xe2\x7d\x26\xb9\x00\x1c\x37\xfe\x7f\x79\xc7\xe3\x3f\x31\x13\x47\xf2\x9b\x7f\x45\xfe\x0e\x00\x00\xff\xff\xeb\xb4\xc4\xeb\xa2\x04\x00\x00")

func assetsBluetooth2TomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsBluetooth2Toml,
		"assets/bluetooth2.toml",
	)
}

func assetsBluetooth2Toml() (*asset, error) {
	bytes, err := assetsBluetooth2TomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bluetooth2.toml", size: 1186, mode: os.FileMode(420), modTime: time.Unix(1674656375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsConfigExampleToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x51\x6f\xe4\x34\x10\x7e\xf7\xaf\x18\x25\x2f\x80\x36\x5e\xee\x4e\x08\x74\x52\x24\x4e\xd7\x83\x2b\xa2\x5d\x44\x7b\xbc\x54\xab\xca\x8d\x27\x1b\xeb\xbc\x9e\xc8\x9e\x34\x2d\x0f\xfc\x76\x34\x4e\xb2\x2c\xed\x82\x7a\xda\x17\x7b\xf2\xcd\xe7\x6f\x3e\x8f\x67\x4b\xb8\xee\x5c\x02\x97\x80\x3b\x04\x7c\x30\xfb\xde\x23\x34\x14\x5a\xb7\x1b\xa2\x61\x47\x01\x5a\xe7\x11\x5a\x8a\x19\xb2\x39\xfb\x08\x67\x86\x0d\x5c\x50\x70\x4c\x51\x2b\x55\x96\x25\x9c\xbd\xfb\x70\xb1\xb9\x84\xf7\x9b\xcb\x9f\xce\x7f\xfe\xf4\xfb\xbb\xeb\xf3\xcd\x25\x94\x65\xa9\x6e\xac\xc1\x3d\x85\xad\x2a\xe1\x0a\x39\x53\xb8\xc0\x18\xef\x8d\x07\x17\x20\x61\x43\xc1\x26\x59\x8e\x9d\x6b\xba\x0c\x98\x52\x20\x75\x34\x78\x0b\x71\x08\x1a\xae\xbb\x2c\x61\x6f\x58\xb4\x36\x91\x02\x7c\xd5\x31\xf7\xe9\xed\x7a\x3d\x8e\xa3\x1e\xdd\x67\xd7\xa3\x75\x46\x53\xdc\xad\x65\xb7\x7e\x1f\x29\x7c\xad\x0e\x87\xd5\x50\x7c\x03\xf3\xaf\x50\x93\x9c\x04\x63\x87\xdc\x61\x3c\x7d\x2c\x18\xb8\x37\xde\xd9\xc9\x06\x09\x0c\xbd\x00\xd8\x44\x1e\x7a\x35\x7f\xc3\x8a\x42\x35\xc7\xa0\x86\xd6\xf8\x84\xc2\x7f\x86\xad\x0b\xee\xe0\xa0\x38\x6c\x78\x4a\x86\xd1\xb1\x94\xea\x12\xf4\x11\x5b\xf7\x00\x26\x22\x04\x62\x70\xa1\xf1\x83\x45\xab\xdc\x2e\x50\xc4\x6a\xfe\x5c\x43\x71\x5b\xa8\xc5\x4c\xed\x69\x77\x6c\xa8\xa7\x1d\x78\xbc\x47\xaf\xe1\x0f\xd1\x24\xaa\x07\x4c\x42\xfa\x16\x2c\xde\x0d\xbb\x15\xb8\xd0\xd2\x0a\x46\x13\xc3\x0a\x30\x46\x8a\x2b\x68\x0d\x1b\xbf\x82\xde\x04\xd7\xa8\x9c\x2f\xe7\x08\x70\xf1\xe7\xc0\x2e\x05\x68\xf8\x15\xcd\x3d\x02\xee\x7b\x7e\x04\xa6\xfc\x81\x09\x12\x5b\x1a\x58\xab\x32\xf7\x49\x0d\xc5\x5f\x6b\xd3\xbb\x84\x21\xe1\x61\x21\x8a\x0b\xb5\x00\x32\xfd\x87\x60\xee\x3c\x4a\xfd\xcc\x8f\x99\x8b\x06\xee\x07\xd6\x53\x47\x8e\xce\x7b\x68\xc8\x53\x74\x7f\xe2\x41\xc7\x04\x01\x13\x2c\xf4\xd1\x05\x06\x27\x96\x81\x81\x88\xc6\x66\xbe\xa9\x49\xb4\x2a\xe1\xbc\x85\x24\x25\xd0\x74\x25\xab\xa7\x24\xf9\x84\x3b\x69\x47\xf8\xe5\x6a\x73\x79\xc8\x9c\x15\xd5\xc0\x71\xc8\x17\xf9\x5e\x54\x2c\x59\xf2\x58\xf2\xd5\x58\x70\xad\xd0\xed\x5c\xc8\x36\x48\x71\x8b\x6b\x94\x73\x73\x94\x62\x83\x53\x1d\x0b\x58\xc3\x26\xf8\x47\xe8\x4c\x02\x13\x00\xdb\x16\x1b\x16\xae\xf9\x5c\x97\x16\xd9\xc2\xa1\x55\x66\xa8\x26\x86\x45\xd3\xd2\x07\x81\xd8\xb5\xae\xc9\xfd\xb9\x34\xc4\x7f\x77\x74\xc2\x60\xe1\x38\x25\x69\x85\xf9\x16\xec\x71\xdf\x7e\x29\x09\x90\x94\xe3\xda\x0c\x8e\xd8\x53\x64\x19\x20\x6c\x5c\x48\x53\xab\x25\xad\x04\x23\xef\x24\xef\x8f\xbc\x5d\x9a\x0c\xf7\xc6\x79\x30\xd6\x46\x4c\x29\x77\xd5\xf3\x73\x98\xb4\x9a\x70\x35\x14\x7b\xfc\x71\x9e\x56\xba\xa1\xfd\xbf\x1a\xf6\xea\xe2\xfa\x37\x48\x18\xef\xa5\x00\x82\x21\x4d\xd3\x4b\x18\xe5\xae\x9e\x38\x90\xf6\xdc\x57\x33\xba\x86\x42\xb6\xfa\x7f\x99\x73\x81\x2f\xe4\xcd\xd8\x1a\xbe\xfb\xe1\xfb\x67\x34\x43\xc2\x18\xcc\x1e\x5f\x4a\x75\xc0\xd7\x50\xcc\xfa\x4e\x68\x33\x29\x8d\x14\xed\x8b\xf5\x2d\xf8\x1a\x8a\x65\x5d\x4c\x13\xfd\xea\xea\xe3\xa9\x71\x9e\x52\x77\x3c\x7a\x04\xd5\x51\xe2\x67\xc3\xc1\x78\x4f\x23\x98\xf0\x98\x3f\x4b\xa4\xa1\x10\xb0\x61\x95\xf7\xcb\x14\x38\xe6\x11\xb3\xb4\x9a\x2d\x7b\xfd\xe6\xf5\x9b\xd7\x93\x92\xeb\x4f\xe7\xa7\x94\xf0\xe0\x8e\x95\xc8\xfb\x1b\x0d\x37\xd2\xb6\xc9\x23\xf6\xc0\x6e\x8f\x4a\xa9\x1b\xd3\xbb\xad\x52\xe5\xcd\x3f\xb3\x7c\xab\xca\x9b\xa3\xad\xc6\x07\x16\x73\xfd\x76\xab\xca\xc5\x63\x6b\xd8\x54\x1d\x89\xcb\x65\x6f\xb8\x93\x98\xd6\x6b\x09\xdf\x4a\xf8\x76\xce\xa7\xb8\x66\x13\x77\xc8\xeb\x88\x1e\x4d\xc2\x53\x90\x42\x95\x26\xee\x12\xd4\x70\xa3\x4a\x00\x80\xa2\xaa\x96\x7f\xa6\x62\x35\x87\x5e\x1d\x56\x55\x35\x04\xc7\x87\x6d\x47\x83\x30\x6c\x55\x29\x63\xae\x6a\x23\xed\xab\xc4\xd6\x85\xe5\x21\x95\x79\x94\x1f\x1e\xf1\xe9\xe2\x34\x3e\x38\xae\x1a\xb2\x98\xa4\x4e\x59\x40\x0d\xdf\xaa\x92\x3e\x1f\x78\x2c\xa6\x26\xba\x3e\xff\x69\xcd\x2d\x81\xb6\xf8\x22\xc2\x57\x33\xe1\x2c\xe5\x09\x63\x6b\x9c\x47\x5b\xfc\x1d\x00\x00\xff\xff\x8f\xa9\x60\x85\x77\x08\x00\x00")

func assetsConfigExampleTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigExampleToml,
		"assets/config.example.toml",
	)
}

func assetsConfigExampleToml() (*asset, error) {
	bytes, err := assetsConfigExampleTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/config.example.toml", size: 2167, mode: os.FileMode(420), modTime: time.Unix(1674656295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.env.example":        assetsEnvExample,
	"assets/bluetooth.toml":      assetsBluetoothToml,
	"assets/bluetooth2.toml":     assetsBluetooth2Toml,
	"assets/config.example.toml": assetsConfigExampleToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".env.example":        &bintree{assetsEnvExample, map[string]*bintree{}},
		"bluetooth.toml":      &bintree{assetsBluetoothToml, map[string]*bintree{}},
		"bluetooth2.toml":     &bintree{assetsBluetooth2Toml, map[string]*bintree{}},
		"config.example.toml": &bintree{assetsConfigExampleToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
