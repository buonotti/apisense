// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/bluetooth.definition.toml
// assets/config.example.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBluetoothDefinitionToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4f\x8b\xe3\xc6\x13\xbd\xeb\x53\x14\x32\x8b\xc7\xe0\x91\x35\x1e\xf8\x1d\x06\x7c\xf8\x65\x49\x72\x0b\x81\x5d\x12\x88\x19\x96\xb2\x54\x1a\xf5\xd2\xdd\xa5\xe9\x2e\xcd\x8e\xb3\xcc\x77\x0f\xdd\xfa\x63\x59\x9e\x21\xc9\x92\xe4\x64\xa9\xbb\xea\xbd\xaa\x7a\xaf\xe4\x05\x7c\xac\x09\x2c\x1a\x02\xae\x40\x6a\x02\xb2\x65\xc3\xca\x0a\x5c\xb5\x9e\x4a\x50\x36\x9e\x3a\x6a\xd8\xc9\x2a\x89\x91\x3b\x48\xbf\xd3\x2d\x09\xb3\xd4\x69\x92\x74\x18\x63\x9e\x30\x14\xa8\x75\x06\x3f\xa3\x43\x43\x42\xce\x43\x81\x16\x0e\x04\xca\x0a\xb9\x86\x35\x0a\x95\xf0\x45\x49\x0d\x5f\xbf\x42\x16\xe3\x7e\x0a\xc0\x2f\x2f\x70\xf5\x23\x83\x90\x69\x42\x0c\xf8\xa3\x15\x7c\x5e\x25\x07\xf4\x74\xdd\x3a\x0d\x3b\x58\xd6\x22\x8d\xbf\xdb\x6c\x0c\x1f\x94\x56\x72\xcc\xb0\x51\x19\x37\x64\x4b\x14\xac\xdb\x43\x56\xb0\xd9\x3c\x05\xdc\xf7\x6c\xbd\xc0\xcb\xcb\xa6\xd2\x28\x9b\xb1\xe2\x0f\x82\xa2\xd8\x9e\x0e\xde\x6d\xf3\xf7\xdc\x5a\x79\xb7\xcd\x1d\x15\xec\xca\xcd\x36\xdf\xde\x5c\xdf\x6c\xaf\x6f\x6f\x3e\x6e\x6f\xef\xf2\xfc\x2e\xcf\xb3\x3c\xcf\x7f\x0b\x17\xdb\x70\xb1\x9d\x5d\x2c\x87\x29\x3c\xb6\xe4\x8e\xd0\x9c\x3a\x17\x86\x06\x7d\xfc\x9d\x4e\xf7\x9f\x9c\xce\x7e\x1f\x59\xef\xef\x93\x4b\x35\x67\xf5\x8c\xfa\x69\x65\x94\xa4\x7d\xc2\x13\xea\xf6\xcd\x8c\xee\x72\x07\xe9\xf5\x4d\x9a\x4c\xb8\x06\xa4\x52\x79\x51\xb6\x90\xf4\x14\x29\xae\xa5\x57\x63\x3d\x69\x3a\x8b\x34\xf1\x69\x1d\x7e\x54\x29\xca\xd0\xda\x34\xe4\x14\x97\xaf\xa6\x7f\xa9\xc9\xd1\x29\x7b\xe9\x0b\x2e\x29\xa3\xc7\x2c\x0d\x83\xea\x67\x94\x0e\x10\xe1\xe2\xf6\x7f\x79\xbe\xf6\x58\x88\x7a\x8a\x81\xa1\xb2\x51\xab\x8a\x9d\x41\x19\xfa\x76\xe4\x1b\xb6\x9e\xe0\xea\xb3\x67\x0b\xec\xe0\xd9\xe8\x55\xd2\x07\xed\x20\x0d\xc7\xd1\xed\xbf\xa0\x53\x78\xd0\x04\x25\x55\xca\xaa\x60\x26\x9f\x2c\xe0\x07\x76\x80\x5a\x83\x65\x0b\x45\xb0\x1e\x5a\x81\xa7\x3e\xd6\xaf\x23\x89\x6d\xcd\x81\x5c\xa0\x8c\x4d\x78\x30\xad\x97\xa0\x7d\xb8\xf4\xa1\x01\xb4\x41\x7b\xad\xc3\xe1\xb0\x80\xec\x4a\x72\xc3\x5e\xcd\x96\xd4\xb7\x87\xcf\x54\x74\x5b\x57\xa3\x7d\xa0\xe0\x87\x81\xf5\x55\x4b\x5c\x9a\x21\x4c\x2e\x78\xe1\xd7\x9a\xa4\x0e\x4c\xd3\x28\x50\xfe\xd4\x0e\x3b\xb0\x2c\xc9\xf8\xbe\x83\x0a\xb5\xa7\x9e\xa5\x61\xef\x55\x18\x4c\xdf\xdc\x05\x61\x7f\xbe\x83\x7d\x02\x00\x90\xfe\xff\x41\x35\x9f\xbe\x57\xd6\x0b\x29\x9b\xae\xe3\xe1\x12\x11\x97\xc9\x7d\x72\xde\xc6\x50\x6a\xdc\xe9\x74\x5a\x40\x90\xf4\x02\x78\x9b\x06\x84\x05\x7c\x28\x6a\x32\x38\x11\x6a\xa2\x76\xab\x25\xd9\xef\xbb\x87\x8c\xac\xbc\xb1\x41\x95\x22\x5d\x8e\xfc\x5c\x55\x9e\xc6\xc5\x91\x63\x73\x1e\x07\x57\x5e\x9c\xb2\x0f\xeb\xb8\xcc\x0f\xe4\xd6\x50\x69\x46\x59\xc3\x81\x59\x13\xda\x35\x70\xd4\x6b\x95\xc4\xdc\x1d\xa4\x7d\xe0\x00\x69\x94\x55\xa6\x35\xe7\x3b\xd9\x63\xb3\xd5\xc7\xe0\xda\x01\x3c\x9a\x25\xe2\xaf\xc0\x53\xf4\x80\x65\x4b\xa0\xaa\xa0\x12\x60\xd3\x68\x55\x84\x01\x26\x46\xd9\xc0\x15\x6e\x47\x22\x7c\xfe\x16\xa2\xc4\xe0\xf3\x14\x6a\xea\x99\x2e\x5b\x79\x70\xf4\xd8\x2a\x47\xe5\xe0\x97\xf1\xbd\x97\xab\xab\xa0\xa8\x95\x2e\x1d\xd9\xb7\xc8\x87\x49\xc5\xf3\x28\x6e\x74\xc5\x4c\xb1\xd9\x17\xed\x62\xac\x67\xad\x9f\x15\x3f\xaf\xea\xaf\xf1\x84\xbf\x99\x13\x0d\x3a\x87\xc7\xbf\x43\x32\x03\xce\x3a\xd2\x09\xfe\xf8\x01\xfc\x77\x3a\x79\x85\x30\x3a\xe0\xbf\xe5\xeb\x3e\xf6\x27\xce\x6e\x6b\xbe\x99\x72\x71\xb9\xc7\x03\x72\x67\xa2\x74\x1e\x72\x2a\x6b\x31\x11\x36\x38\x7a\x5e\xd2\x9f\x27\x86\x56\x7e\x67\x4b\x9f\x42\xea\x04\x61\x1c\xe4\x1f\x01\x00\x00\xff\xff\xdc\x1f\xd4\x2c\x65\x09\x00\x00")

func assetsBluetoothDefinitionTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsBluetoothDefinitionToml,
		"assets/bluetooth.definition.toml",
	)
}

func assetsBluetoothDefinitionToml() (*asset, error) {
	bytes, err := assetsBluetoothDefinitionTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bluetooth.definition.toml", size: 2405, mode: os.FileMode(420), modTime: time.Unix(1673181091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsConfigExampleToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\x1b\x3b\x0c\xbc\xeb\x2b\x08\xef\xd5\x96\xef\x0f\x30\x90\xe0\x25\xef\x35\x45\x63\x03\x4d\xda\x4b\xd1\x03\xb3\xe2\x7a\x09\x68\xc5\x05\xc5\xb5\xeb\x7e\x7d\x21\x6d\x6c\x38\x69\x2f\xbd\x59\xf2\xcc\x70\x38\xa4\xb6\x81\xe7\x9e\x33\x70\x06\xeb\x09\xe8\x07\x0e\x63\x24\x68\x25\x75\xbc\x9f\x14\x8d\x25\x41\xc7\x91\xa0\x13\xad\x90\xdd\xdd\x07\xb8\x43\x43\x78\x94\xc4\x26\xea\x9d\x6b\x9a\x06\xee\x6e\xef\x1f\x77\x5b\xf8\x77\xb7\xfd\xef\xe1\xff\x2f\x9f\x6f\x9f\x1f\x76\x5b\x68\x9a\xc6\x7d\x0b\x48\x83\xa4\xef\xae\x81\x27\xb2\x2a\xc1\xc9\x48\x0f\x18\x81\x13\x64\x6a\x25\x85\x5c\x7e\x1e\x7b\x6e\xfb\x0a\x98\x29\x90\x7b\x99\x62\x00\x9d\x92\x77\x17\xce\x06\x16\x37\x01\x39\x9e\x16\xee\x4a\x32\x50\xc7\x89\xab\xdb\xc0\x4a\xad\x89\x9e\xfc\x9b\xd6\x2e\xd7\x70\xec\x49\xa9\xde\xe1\xc8\x57\xcc\x0c\xa8\x04\xd9\x44\x29\x78\x77\x75\xbf\x0a\xac\xa5\xee\xba\x97\x81\xd6\x38\x29\x45\x96\xb5\x9f\x43\x5a\x4b\xe8\x57\x01\x0d\x57\xc3\x1c\xc8\xfa\x8a\xe9\xc3\xc2\x9d\x13\xf0\x51\xf6\xd7\x29\x44\xd9\x43\xa4\x03\x45\x0f\x5f\x31\x72\x80\x03\xc6\x89\xaa\x89\x7f\x20\xd0\xcb\xb4\x5f\x02\xa7\x4e\x96\x70\x44\x4d\x4b\x20\x55\xd1\x25\x74\x68\x18\x97\x30\x62\xe2\xd6\x55\x7e\xb1\x56\x80\x6f\x02\x29\xea\x65\x6e\x1e\x3e\x11\x1e\x08\x68\x18\xed\x04\x26\xf5\x0f\x13\xc8\x16\x64\x32\xef\xea\x6c\x37\xb0\xa8\xe4\xfb\x84\x2f\x91\x60\x54\x32\x3b\x55\xa4\x4c\x36\x4e\xf6\x9a\xe4\x91\x63\x84\x56\xa2\x28\xff\xa4\x4b\x95\x19\x02\x98\x02\x8c\xca\xc9\x80\xad\x4c\x13\x41\x09\x43\xd5\xeb\x44\x07\x34\xef\x1a\x78\xe8\x20\x17\x83\x02\x1d\xc6\x4c\xcb\xf7\x22\xb5\xc2\x4b\xd9\x10\xf8\xf8\xb4\xdb\x5e\x98\xaf\x8e\x36\x60\x3a\xd1\xa5\x4d\xa9\xc7\xaa\x26\xda\xd2\x6c\xad\xc8\xed\x39\xed\x3d\xec\x52\x3c\x41\x8f\x19\x30\x01\x75\x1d\xb5\x06\xdc\x9d\x9b\xe3\x7c\x76\x52\x34\xbc\xab\x0a\xab\x59\xe1\x5c\xe6\x3c\xb8\x24\xc6\x1d\xb7\xf5\x31\x9c\x27\x78\xec\xc9\x7a\xd2\x3f\xac\x6b\xa6\x14\xe0\x9a\x92\xbd\xa3\x1a\x6c\x78\xd7\xc0\xdf\x68\x80\x94\x6e\xb8\xab\x60\xa5\x51\xd4\xca\x2b\x35\xe4\x94\xe7\xd5\xc8\xde\x15\xcc\x4a\xd2\xaa\x9e\xdf\xa7\x55\x9e\xf7\x80\x1c\x01\x43\x50\xca\xb9\x6e\xc1\xef\x75\x4c\xbc\x9b\x71\x1b\x58\x0c\x74\xf3\xfa\x49\xf0\xad\x0c\x0b\xf7\x2b\x00\x00\xff\xff\x95\x2e\x36\x40\x2e\x04\x00\x00")

func assetsConfigExampleTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigExampleToml,
		"assets/config.example.toml",
	)
}

func assetsConfigExampleToml() (*asset, error) {
	bytes, err := assetsConfigExampleTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/config.example.toml", size: 1070, mode: os.FileMode(420), modTime: time.Unix(1673171435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/bluetooth.definition.toml": assetsBluetoothDefinitionToml,
	"assets/config.example.toml":       assetsConfigExampleToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"bluetooth.definition.toml": &bintree{assetsBluetoothDefinitionToml, map[string]*bintree{}},
		"config.example.toml":       &bintree{assetsConfigExampleToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
