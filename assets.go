// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/bluetooth.definition.toml
// assets/config.example.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBluetoothDefinitionToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x6d\x6b\xe3\x46\x10\xfe\xae\x5f\x31\xc8\x1c\x49\xc0\x91\x15\x1f\xf4\x83\x39\x17\xae\xe5\xae\xdf\x8e\xc2\x85\x2b\x34\x84\xb0\x96\x46\xd6\x5c\x77\x77\x94\xdd\x95\x1d\x73\xe4\xbf\x97\x59\xbd\xf8\x2d\x81\xeb\xd1\xf6\x83\x91\xb4\xf3\xf2\x3c\x33\xf3\xcc\x7a\x02\xb7\x35\x82\x55\x06\x81\x2b\x08\x35\x02\xda\xb2\x61\xb2\x01\x2e\x5b\x8f\x25\x90\x8d\xa7\x0e\x1b\x76\xe1\x2a\x89\x9e\x4b\x48\x7f\xd1\x2d\x06\xe6\x50\xa7\x49\xd2\xe5\x18\xe3\x02\x43\xa1\xb4\xce\xe0\x8b\x72\xa4\x56\x1a\x3d\x14\xca\xc2\x0a\x81\x6c\x40\xd7\xb0\x56\x01\x4b\xd8\x52\xa8\xe1\xdb\x37\xc8\x7e\x57\x4e\x99\x4f\x92\xf7\xf9\x19\x2e\x7f\x63\x08\x68\x1a\xf1\x01\xbf\xb3\x41\x3d\x5d\x75\x00\x0e\x41\xc9\x4f\x7b\x86\xb0\x65\x58\xb5\xa4\x03\x59\xa8\x5a\x5b\x04\x62\xeb\x17\xf0\x89\xb7\xa0\x6c\x09\x1f\xec\x26\x99\xc4\x2f\xf2\x10\xab\x88\x60\x52\x47\xc5\x5a\xf3\x96\xec\xba\x4f\xbe\x88\x14\xc4\x35\x7d\x57\xb1\x33\x2a\xfc\x9c\x0a\x8f\x1d\xb7\x91\x75\x45\xb6\xec\x03\xc5\x08\xc2\x63\x01\x75\x08\x8d\x5f\xcc\x66\xcd\x5f\xeb\x6c\xcd\x59\x89\x9b\x59\x20\x83\x93\x5b\x32\x98\x7d\x8c\x9e\xc9\x44\x68\x7c\x2f\x01\x71\x4d\xdf\xa1\xdd\x3c\x6c\x94\x7b\x90\x26\x47\x1a\xc9\x4a\x79\xbc\x6e\x9d\x86\x25\x5c\x0c\xa0\x86\x57\xa4\x29\xec\x32\xd5\x50\xc6\x0d\xda\x52\x05\x55\xb7\xab\xac\x60\x33\xdb\x48\xb6\xf7\x0d\x7d\x41\xe7\x89\x2d\x3c\x3f\xcf\x2a\xad\xc2\x6c\x9c\xd7\xe7\xa0\xa4\x5b\xfb\x83\x37\xf3\xfc\x57\x6e\x6d\x78\x33\xcf\x1d\x16\xec\xca\xd9\x3c\x9f\xdf\x5c\xdf\xcc\xaf\xdf\xde\xdc\xce\xdf\x2e\xf2\x7c\x91\xe7\x59\x9e\xe7\x7f\x8a\x61\x2e\x86\xf9\x89\xe1\x62\xd0\xc0\x63\x8b\x6e\x07\x8d\x0c\x14\x03\x3a\x2f\x5a\x68\x94\x8f\xcf\x43\x6d\xfd\x8b\xda\xb8\xbb\x8b\xa0\xf7\xf7\xc9\xb9\x94\x4f\xe8\x8c\xe2\xd5\x64\x28\xa4\x7d\xc0\x46\xe9\xf6\xd5\x88\xce\xb8\x84\xf4\xfa\x26\x4d\x0e\xb0\x86\x4c\x25\xf9\x40\xb6\x08\xe9\xde\x33\xb8\x16\x5f\xf4\xf5\xa8\xf1\xc8\xd3\xc4\xb7\xa9\x3c\xa8\x14\xfd\x4c\x4d\x83\x8e\xb8\x7c\x31\x7c\x2b\xd2\xdb\x47\x5f\xf8\x82\x4b\xcc\xf0\x31\x4b\xa3\x82\xbb\x1e\xa5\x43\x0a\x31\xbc\xfd\x29\xcf\xa7\x5e\x15\x81\x36\xd1\x51\x98\x8d\xa3\xea\xf5\xdc\xd7\xed\xd0\x37\x6c\x3d\xc2\xe5\x57\xcf\x16\xd8\xc1\x93\xd1\x57\x49\xef\xb4\x84\x54\x8e\xe3\xaa\x0f\x83\x83\x12\x2b\xb2\x14\x37\x2f\x99\xc0\x47\x76\xa0\xb4\x06\xcb\x16\x0a\xb6\x3e\x28\x1b\x60\x33\x0c\x79\x1a\x41\x6c\x6b\x56\xe8\x04\x32\x16\xe1\xc1\xb4\x3e\xc8\xec\xc5\xe8\xa5\x00\x59\xde\x2d\x69\x2d\x87\xc3\xed\xc3\xae\x44\x37\x5c\x2a\x27\x37\x94\x6f\x57\x5f\xb1\xe8\xae\x9c\x5a\xd9\x35\x8a\x1e\x06\xd4\x17\x25\x71\x2e\x06\xe9\x9c\x68\xe1\x8f\x1a\x43\x2d\x48\x87\x5e\xb2\xbf\x63\x39\xec\xc0\x72\x48\xc6\xef\x25\x54\x4a\x7b\xec\x51\x1a\xf6\x9e\xa4\x31\x7d\x71\x67\x80\xfd\xf9\x12\xee\x12\x00\x80\xf4\xfd\x9a\x9a\x87\x0f\x64\x7d\x40\xb2\xe9\x34\x1e\x5e\x28\xa5\x2e\x92\xfb\xe4\xb8\x8c\x81\xea\x7e\xaf\xd3\x43\x16\x32\xd7\xb3\xec\xf3\x54\xd2\x4c\xe0\x73\x51\xa3\x51\x07\xd3\x3a\x18\x79\xab\x43\x72\x77\xd7\xbd\x64\x68\xc3\x2b\x6b\x54\x11\xea\x72\x24\xc1\x55\xe5\x71\xdc\x9e\xb0\x6b\x8e\xfd\xe0\xd2\x07\x47\x76\x3d\x8d\x1b\xbd\x46\x37\x85\x4a\xb3\x0a\x53\x58\x31\x6b\x54\x76\x0a\x1c\x87\x76\x95\xc4\xd8\x25\xa4\xbd\xe3\x90\xd2\x90\x25\xd3\x9a\xe3\xc5\xec\x73\xb3\xd5\x3b\x91\xee\x90\x3c\x2a\x26\xe6\xbf\x02\x8f\x51\x08\x96\x2d\x02\x55\x32\x2a\x50\x4d\xa3\xa9\x90\x2e\x26\x86\xac\x60\x89\x75\x04\x52\x4f\x3f\x02\x94\x18\xf5\x74\x98\xea\x50\x38\x5d\x34\x79\x70\xf8\xd8\x92\xc3\x72\x10\xcd\xf8\xdd\x8f\xab\x63\x50\xd4\xa4\x4b\x87\xf6\x35\xf0\xa1\x53\xf1\x3c\x0e\x37\x4a\xe3\x64\x62\x27\xd7\xda\x59\x5b\x8f\x4a\x3f\x22\x7f\xca\xea\xfb\x70\xe4\xff\x66\x0f\xa3\x9c\x53\xbb\x7f\x02\x72\x92\x38\xeb\x40\x0f\xf2\x8f\xb7\xe0\x7f\x53\xc9\x0b\x80\x51\x01\xff\x2f\x5e\x77\xe3\xef\x31\xbb\xad\xf9\x51\xc8\xbf\x03\x00\x00\xff\xff\x3f\x79\x94\x4c\xc7\x09\x00\x00")

func assetsBluetoothDefinitionTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsBluetoothDefinitionToml,
		"assets/bluetooth.definition.toml",
	)
}

func assetsBluetoothDefinitionToml() (*asset, error) {
	bytes, err := assetsBluetoothDefinitionTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bluetooth.definition.toml", size: 2503, mode: os.FileMode(420), modTime: time.Unix(1673279409, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsConfigExampleToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xe3\x36\x10\xbd\xf3\x2b\x06\xd2\xa5\x5d\xd8\x34\x90\x45\xd1\x62\x01\x01\x5d\x6c\xb6\xdd\x14\x4d\x5c\x34\x69\x2f\x8b\x1e\x18\x71\x64\x0d\x4a\x71\x04\x72\x64\xd5\x3d\xf4\xdb\x0b\x52\x92\x21\x27\x41\x91\x2e\x7c\x31\x47\x6f\xde\xbc\x79\x1c\x4e\x09\x0f\x2d\x45\xa0\x08\xd2\x22\xe0\x5f\xa6\xeb\x1d\x42\xcd\xbe\xa1\xc3\x10\x8c\x10\x7b\x68\xc8\x21\x34\x1c\x32\x64\x7f\xfd\x09\xae\x8d\x18\xb8\x65\x4f\xc2\x41\x2b\x55\x96\x25\x5c\xbf\xff\x78\xbb\xbf\x83\x0f\xfb\xbb\x1f\x6e\x7e\xfc\xed\xd7\xf7\x0f\x37\xfb\x3b\x28\xcb\x52\x7d\xb6\x06\x3b\xf6\x7f\xa8\x12\xee\x51\x32\x05\x79\xc1\x70\x34\x0e\xc8\x43\xc4\x9a\xbd\x8d\xe9\xef\xd8\x52\xdd\x66\xc0\x94\x02\xb1\xe5\xc1\x59\x08\x83\xd7\xf0\xd0\x66\x09\x9d\x91\xa4\xb5\x0e\xec\xe1\xab\x56\xa4\x8f\xef\x76\xbb\x71\x1c\xf5\x48\x7f\x52\x8f\x96\x8c\xe6\x70\xd8\xa5\xd3\xee\x43\x60\xff\xb5\x3a\x17\xab\xa0\x78\xb3\xbb\x82\x37\xd3\xaf\x50\x2b\x41\x16\x1b\xf2\x94\x7b\xb5\x14\xb0\x16\x0e\x27\x7d\x61\xcc\x39\x0c\x63\x8b\x01\x73\xcc\xf4\xb4\xca\x8c\x60\x02\x42\x14\x0e\x68\xb5\x5a\xc5\xb7\x96\x42\x2a\xfe\xcf\x4e\x4f\xb6\xee\xd8\xb6\x5b\x6b\xc4\x6c\xbb\xc9\xc2\xdd\x0a\xad\xed\x85\xb2\x80\x3d\x07\x01\x1e\xa4\x1f\xe4\xff\x88\x9b\x12\x2f\x45\xcd\xb1\x57\x08\x9a\x91\x85\x5a\xae\x4f\x3b\x3e\xac\xaf\xd0\xf1\x01\x1c\x1e\xd1\x69\xf8\xdd\x38\xb2\x70\x34\x6e\xc0\x5c\xee\x1d\x58\x7c\x1c\x0e\x1b\x20\xdf\xf0\x06\x46\x13\xfc\x06\x30\x04\x0e\x1b\x68\x8c\x18\xb7\x81\xde\x78\xaa\x55\xce\x4f\x42\x12\xf0\xa2\xeb\xc4\x9e\x86\x4e\xc3\xcf\x68\x8e\x08\xd8\xf5\x72\x02\xe1\xfc\x41\x18\xa2\x58\x1e\x44\xab\x3c\x98\x15\x14\x39\xf9\xa3\x37\x8f\x0e\xa1\x0f\x28\x72\xca\xc8\xc9\xb5\xd9\xab\x91\x9c\x83\x9a\x1d\x07\xfa\x1b\xcf\x55\x66\x63\x8d\xb7\xd0\x07\xf2\x02\x24\x69\x14\x0d\x04\x34\x36\xf3\x4d\x43\xa7\x55\x09\x37\x0d\xc4\x24\x90\xa1\x31\x2e\xe2\xe6\x29\x49\xae\xf0\x98\xc6\x1b\x7e\xba\xdf\xdf\x9d\x33\x67\x45\x15\x48\x18\xf0\xdc\x26\xe7\x63\x66\xe3\x50\xe3\x24\x2d\xd1\x1d\xc8\x1f\x34\xec\xbd\x3b\x41\x6b\x22\x18\x0f\xd8\x34\x58\x0b\x50\xb3\x34\x47\x71\x51\x92\x38\xb4\xca\x0c\xdb\x89\x61\x29\xb3\x5c\x9c\x67\xa1\x86\xea\xfc\x92\x97\x1b\x1c\x5b\x94\x16\xc3\x0b\x6f\x2d\xa2\xb7\xb0\x4e\x89\x5a\x61\x36\xd6\x42\x35\xf5\xad\xbe\x80\x04\x38\xb5\x43\xcd\x7a\xa6\x6b\xf6\x62\xc8\xc7\x69\x36\xa2\x56\x09\xb3\x65\xbf\xcd\xe7\xa7\x76\xa5\xe5\xd4\x19\x72\x60\xac\x0d\x18\x63\x1e\x83\xe7\x75\x84\xb5\x9a\x70\x15\x14\x1d\x7e\x3f\x2f\x34\x5d\x73\x77\x31\x61\xf7\xb7\x0f\xbf\x40\xc4\x70\x4c\x0d\x30\x0c\x71\x5a\x70\x89\x91\xfc\xe1\xa9\x03\xb1\x93\x7e\x3b\xa3\x2b\x28\xd2\x51\xff\x27\x73\x6e\xf0\x95\xbc\x19\x5b\xc1\x37\xdf\x7d\xfb\x8c\x66\x88\x18\xbc\xe9\xf0\xb5\x54\x67\x7c\x05\xc5\xac\xef\x05\x6d\x26\xc6\x91\x83\x7d\xb5\xbe\x05\x5f\x41\xb1\xfc\x2f\xa6\xa5\x7f\x7f\xff\xe9\xa5\x8d\x1f\x63\xbb\xde\x15\x09\xd5\x72\x94\x67\xaf\xd9\x38\xc7\x23\x18\x7f\xca\x9f\x53\xa4\x66\xef\xb1\x16\x95\xcf\xcb\xc3\x5e\xf3\x24\xb3\xb4\x9a\x2d\xbb\x7a\x7b\xf5\xf6\x4a\xa9\xcf\x32\xd0\xba\x5e\xda\x0a\xa3\x91\x3a\x0d\x67\x74\x88\x3d\x08\x75\xf8\x6f\x00\x00\x00\xff\xff\xf6\xa1\x28\x5c\xe9\x06\x00\x00")

func assetsConfigExampleTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigExampleToml,
		"assets/config.example.toml",
	)
}

func assetsConfigExampleToml() (*asset, error) {
	bytes, err := assetsConfigExampleTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/config.example.toml", size: 1769, mode: os.FileMode(420), modTime: time.Unix(1673338876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/bluetooth.definition.toml": assetsBluetoothDefinitionToml,
	"assets/config.example.toml":       assetsConfigExampleToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"bluetooth.definition.toml": &bintree{assetsBluetoothDefinitionToml, map[string]*bintree{}},
		"config.example.toml":       &bintree{assetsConfigExampleToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
