// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/bluetooth.definition.toml
// assets/config.example.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBluetoothDefinitionToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4f\x8b\xe3\xc6\x13\xbd\xeb\x53\x14\x32\x8b\xc7\xe0\x91\x35\x1e\xf8\x1d\x06\x7c\xf8\x65\x49\x72\x0b\x81\x5d\x12\x88\x19\x96\xb2\x54\x1a\xf5\xd2\xdd\xa5\xe9\x2e\xcd\x8e\xb3\xcc\x77\x0f\xdd\xfa\x63\x59\x9e\x21\xc9\x92\xe4\x64\xa9\xbb\xea\xbd\xaa\x7a\xaf\xe4\x05\x7c\xac\x09\x2c\x1a\x02\xae\x40\x6a\x02\xb2\x65\xc3\xca\x0a\x5c\xb5\x9e\x4a\x50\x36\x9e\x3a\x6a\xd8\xc9\x2a\x89\x91\x3b\x48\xbf\xd3\x2d\x09\xb3\xd4\x69\x92\x74\x18\x63\x9e\x30\x14\xa8\x75\x06\x3f\xa3\x43\x43\x42\xce\x43\x81\x16\x0e\x04\xca\x0a\xb9\x86\x35\x0a\x95\xf0\x45\x49\x0d\x5f\xbf\x42\x16\xe3\x7e\x0a\xc0\x2f\x2f\x70\xf5\x23\x83\x90\x69\x42\x0c\xf8\xa3\x15\x7c\x5e\x25\x07\xf4\x74\xdd\x3a\x0d\x3b\x58\xd6\x22\x8d\xbf\xdb\x6c\x0c\x1f\x94\x56\x72\xcc\xb0\x51\x19\x37\x64\x4b\x14\xac\xdb\x43\x56\xb0\xd9\x3c\x05\xdc\xf7\x6c\xbd\xc0\xcb\xcb\xa6\xd2\x28\x9b\xb1\xe2\x0f\x82\xa2\xd8\x9e\x0e\xde\x6d\xf3\xf7\xdc\x5a\x79\xb7\xcd\x1d\x15\xec\xca\xcd\x36\xdf\xde\x5c\xdf\x6c\xaf\x6f\x6f\x3e\x6e\x6f\xef\xf2\xfc\x2e\xcf\xb3\x3c\xcf\x7f\x0b\x17\xdb\x70\xb1\x9d\x5d\x2c\x87\x29\x3c\xb6\xe4\x8e\xd0\x9c\x3a\x17\x86\x06\x7d\xfc\x9d\x4e\xf7\x9f\x9c\xce\x7e\x1f\x59\xef\xef\x93\x4b\x35\x67\xf5\x8c\xfa\x69\x65\x94\xa4\x7d\xc2\x13\xea\xf6\xcd\x8c\xee\x72\x07\xe9\xf5\x4d\x9a\x4c\xb8\x06\xa4\x52\x79\x51\xb6\x90\xf4\x14\x29\xae\xa5\x57\x63\x3d\x69\x3a\x8b\x34\xf1\x69\x1d\x7e\x54\x29\xca\xd0\xda\x34\xe4\x14\x97\xaf\xa6\x7f\xa9\xc9\xd1\x29\x7b\xe9\x0b\x2e\x29\xa3\xc7\x2c\x0d\x83\xea\x67\x94\x0e\x10\xe1\xe2\xf6\x7f\x79\xbe\xf6\x58\x88\x7a\x8a\x81\xa1\xb2\x51\xab\x8a\x9d\x41\x19\xfa\x76\xe4\x1b\xb6\x9e\xe0\xea\xb3\x67\x0b\xec\xe0\xd9\xe8\x55\xd2\x07\xed\x20\x0d\xc7\xd1\xed\xbf\xa0\x53\x78\xd0\x04\x25\x55\xca\xaa\x60\x26\x9f\x2c\xe0\x07\x76\x80\x5a\x83\x65\x0b\x45\xb0\x1e\x5a\x81\xa7\x3e\xd6\xaf\x23\x89\x6d\xcd\x81\x5c\xa0\x8c\x4d\x78\x30\xad\x97\xa0\x7d\xb8\xf4\xa1\x01\xb4\x41\x7b\xad\xc3\xe1\xb0\x80\xec\x4a\x72\xc3\x5e\xcd\x96\xd4\xb7\x87\xcf\x54\x74\x5b\x57\xa3\x7d\xa0\xe0\x87\x81\xf5\x55\x4b\x5c\x9a\x21\x4c\x2e\x78\xe1\xd7\x9a\xa4\x0e\x4c\xd3\x28\x50\xfe\xd4\x0e\x3b\xb0\x2c\xc9\xf8\xbe\x83\x0a\xb5\xa7\x9e\xa5\x61\xef\x55\x18\x4c\xdf\xdc\x05\x61\x7f\xbe\x83\x7d\x02\x00\x90\xfe\xff\x41\x35\x9f\xbe\x57\xd6\x0b\x29\x9b\xae\xe3\xe1\x12\x11\x97\xc9\x7d\x72\xde\xc6\x50\x6a\xdc\xe9\x74\x5a\x40\x90\xf4\x02\x78\x9b\x06\x84\x05\x7c\x28\x6a\x32\x38\x11\x6a\xa2\x76\xab\x25\xd9\xef\xbb\x87\x8c\xac\xbc\xb1\x41\x95\x22\x5d\x8e\xfc\x5c\x55\x9e\xc6\xc5\x91\x63\x73\x1e\x07\x57\x5e\x9c\xb2\x0f\xeb\xb8\xcc\x0f\xe4\xd6\x50\x69\x46\x59\xc3\x81\x59\x13\xda\x35\x70\xd4\x6b\x95\xc4\xdc\x1d\xa4\x7d\xe0\x00\x69\x94\x55\xa6\x35\xe7\x3b\xd9\x63\xb3\xd5\xc7\xe0\xda\x01\x3c\x9a\x25\xe2\xaf\xc0\x53\xf4\x80\x65\x4b\xa0\xaa\xa0\x12\x60\xd3\x68\x55\x84\x01\x26\x46\xd9\xc0\x15\x6e\x47\x22\x7c\xfe\x16\xa2\xc4\xe0\xf3\x14\x6a\xea\x99\x2e\x5b\x79\x70\xf4\xd8\x2a\x47\xe5\xe0\x97\xf1\xbd\x97\xab\xab\xa0\xa8\x95\x2e\x1d\xd9\xb7\xc8\x87\x49\xc5\xf3\x28\x6e\x74\xc5\x4c\xb1\xd9\x17\xed\x62\xac\x67\xad\x9f\x15\x3f\xaf\xea\xaf\xf1\x84\xbf\x99\x13\x0d\x3a\x87\xc7\xbf\x43\x32\x03\xce\x3a\xd2\x09\xfe\xf8\x01\xfc\x77\x3a\x79\x85\x30\x3a\xe0\xbf\xe5\xeb\x3e\xf6\x27\xce\x6e\x6b\xbe\x99\x72\x71\xb9\xc7\x03\x72\x67\xa2\x74\x1e\x72\x2a\x6b\x31\x11\x36\x38\x7a\x5e\xd2\x9f\x27\x86\x56\x7e\x67\x4b\x9f\x42\xea\x04\x61\x1c\xe4\x1f\x01\x00\x00\xff\xff\xdc\x1f\xd4\x2c\x65\x09\x00\x00")

func assetsBluetoothDefinitionTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsBluetoothDefinitionToml,
		"assets/bluetooth.definition.toml",
	)
}

func assetsBluetoothDefinitionToml() (*asset, error) {
	bytes, err := assetsBluetoothDefinitionTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bluetooth.definition.toml", size: 2405, mode: os.FileMode(420), modTime: time.Unix(1673248744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsConfigExampleToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\x1b\x39\x0c\xbd\xeb\x2b\x08\xcf\xd5\x96\xef\x0b\x18\x48\xb0\xc9\xee\x66\xd1\xd8\x40\x93\xf6\x52\xf4\xc0\x8c\x28\x0f\x01\x8d\x38\x90\x38\x76\xdd\xaf\x2f\xa4\xb1\x8d\x71\xda\x4b\x6e\x23\x0e\xdf\xe3\xe3\x23\xa5\x06\x5e\x3b\xce\xc0\x19\xb4\x23\xa0\x1f\xd8\x0f\x81\xa0\x95\xe8\x79\x3f\x26\x54\x96\x08\x9e\x03\x81\x97\x54\x53\x76\x0f\xff\xc1\x03\x2a\xc2\xb3\x44\x56\x49\xd6\x98\xa6\x69\xe0\xe1\xfe\xf1\x79\xb7\x85\xbf\x77\xdb\x7f\x9e\xfe\xfd\xf2\xf9\xfe\xf5\x69\xb7\x85\xa6\x69\xcc\x37\x87\xd4\x4b\xfc\x6e\x1a\x78\x21\xad\x14\x1c\x95\xd2\x01\x03\x70\x84\x4c\xad\x44\x97\xcb\xe7\xb1\xe3\xb6\xab\x09\x13\x04\x72\x27\x63\x70\x90\xc6\x68\xcd\x15\xb3\x81\xc5\x9d\x43\x0e\xa7\x85\x99\x51\x3a\xf2\x1c\xb9\xaa\x75\x9c\xa8\x55\x49\x27\x7b\xd3\xda\x35\x0c\xc7\x8e\x12\xd5\x18\x0e\x3c\x43\x66\xc0\x44\x90\x55\x12\x39\x6b\x66\xf1\x95\xe3\x54\xea\xae\x3b\xe9\x69\x8d\x63\xa2\xc0\xb2\xb6\x93\x49\x6b\x71\xdd\xca\xa1\xe2\xaa\x9f\x0c\x59\xcf\x90\xd6\xdd\xa8\x4c\x34\x48\x52\x90\x51\x87\x51\x3f\x22\x74\x02\xde\x0a\x3c\xc7\x3e\x28\xee\x8c\x5a\x98\xcb\x60\x6c\x90\xfd\x7c\x38\x41\xf6\x10\xe8\x40\xc1\xc2\x57\x0c\xec\xe0\x80\x61\xa4\x5a\xfa\x2f\x70\xf4\x36\xee\x97\xc0\xd1\xcb\x12\x8e\x98\xe2\x12\x28\x25\x49\x4b\xf0\xa8\x18\x96\x30\x60\xe4\xd6\x54\x7c\x11\x55\x12\x6f\x1c\x28\xec\x65\x9d\x2c\x7c\x22\x3c\x10\x50\x3f\xe8\x09\x54\xea\x0f\x15\xc8\xea\x64\x54\x6b\xea\xca\x6d\x60\x51\xc1\x8f\x11\xdf\x02\xc1\x90\x48\xf5\x54\x33\x27\x07\xcf\xbe\x1d\x39\x04\x68\x25\x48\xe2\x9f\x74\xad\x72\x36\x19\xa3\x83\x21\x71\x54\x60\x2d\x4b\x86\x90\x08\x5d\xe5\xf3\x92\x7a\x54\x6b\x1a\x78\xf2\x90\x8b\x40\x01\x8f\x21\xd3\xf2\x3d\x49\xad\xf0\x56\x16\x17\xfe\x7f\xd9\x6d\xaf\xc8\xb3\xa2\x0d\x68\x1a\xe9\xda\xa6\xd4\x63\x65\x93\xd4\xd2\x24\xad\xd0\xed\x39\xee\x2d\xec\x62\x38\x41\x87\x19\x30\x02\x79\x4f\xad\x02\xfb\x4b\x73\x9c\x2f\x4a\x0a\x87\x35\x95\x61\x35\x31\x5c\xca\x5c\x06\x17\x45\xd9\x73\x5b\xef\xe8\x65\x82\xc7\x8e\xb4\xa3\xf4\x87\x5b\x94\x29\x3a\x98\x43\xb2\x35\x54\x8d\x75\xef\x1a\xf8\x08\x07\x48\xe9\x86\xfd\x7c\xbd\x5b\x89\x8a\x1c\xf3\xb4\x1a\xd9\x9a\x92\xb3\x92\xb8\xaa\xe7\xf7\x6e\x95\x57\xa7\x47\x0e\x80\xce\x25\xca\xb9\x6e\xc1\xef\x75\x54\xac\x99\xf2\x36\xb0\xe8\xe9\xee\xfc\x52\xd9\x56\xfa\x85\xf9\x15\x00\x00\xff\xff\xb9\xab\x13\xf6\xc5\x04\x00\x00")

func assetsConfigExampleTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigExampleToml,
		"assets/config.example.toml",
	)
}

func assetsConfigExampleToml() (*asset, error) {
	bytes, err := assetsConfigExampleTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/config.example.toml", size: 1070, mode: os.FileMode(420), modTime: time.Unix(1673171435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/bluetooth.definition.toml": assetsBluetoothDefinitionToml,
	"assets/config.example.toml":       assetsConfigExampleToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"bluetooth.definition.toml": &bintree{assetsBluetoothDefinitionToml, map[string]*bintree{}},
		"config.example.toml":       &bintree{assetsConfigExampleToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
